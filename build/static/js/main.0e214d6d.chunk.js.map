{"version":3,"sources":["assets/logo.svg","components/Logo.tsx","utils/api-utils.tsx","components/TopBar.tsx","components/Signin.tsx","components/DashboardCharts.tsx","components/UploadForm.tsx","components/DashboardTable.tsx","components/DashboardMain.tsx","components/Dashboard.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Logo","className","src","logo","alt","parseCookies","key","match","document","cookie","RegExp","result","decodeURIComponent","error","console","warn","post","url","requestData","a","header","fetch","method","headers","body","then","response","json","responseData","code","log","get","handleError","errorCode","language","undefined","messageLanguageMap","message","Map","Header","Layout","SubMenu","Menu","TopBar","handleSelectLanguage","event","props","switchLanguage","handleClickLogout","APIUtils","handleSignout","enzh","english","chinese","userMenu","Item","icon","LogoutOutlined","height","style","float","onClick","this","theme","mode","authorized","GlobalOutlined","title","React","Component","Signin","onFinish","values","signinData","name","username","password","JSON","stringify","handleSignin","initialValues","remember","rules","required","prefix","UserOutlined","placeholder","LockOutlined","type","valuePropName","noStyle","href","e","preventDefault","htmlType","DashboardCharts","gutter","span","formItemLayout","labelCol","wrapperCol","TextArea","Input","Option","Select","UploadForm","state","setAccident","checked","setState","isAccident","onSubmit","uploadInProgress","loadFile","fileData","file","Array","isArray","fileList","label","rows","width","value","checkedChildren","unCheckedChildren","onChange","disabled","disabledDate","current","isAfter","moment","Group","Button","getValueFromEvent","Dragger","beforeUpload","InboxOutlined","offset","loading","Search","RangePicker","DatePicker","DashboardTable","openDrawer","drawerVisible","onDrawerClose","mockFormColumns","dataIndex","render","status","length","color","overlay","bulkActionMenu","mockFormData","fileID","uploadTime","action","filterPopup","productName","tab","product","catch","err","shape","CloudUploadOutlined","trigger","UnorderedListOutlined","placement","content","FilterOutlined","onSearch","size","padding","rowSelection","pagination","pageSize","columns","dataSource","onClose","visible","bodyStyle","paddingBottom","DashboardMain","ghost","tags","subTitle","split","extra","ExportOutlined","dot","BellOutlined","column","paddingTop","orientation","Content","Sider","Footer","Dashboard","handleSelect","margin","defaultSelectedKeys","onSelect","SisternodeOutlined","NodeIndexOutlined","ExperimentOutlined","minHeight","textAlign","App","componentDidMount","inputLanguage","mountSignin","to","mountDashboard","bind","exact","path","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e214d6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\n\r\nimport 'styles/Logo.css'\r\n\r\nimport logo from 'assets/logo.svg';\r\n\r\nconst Logo = () => (\r\n  <div className=\"Logo\">\r\n    <div className=\"Logo-icon-box\">\r\n    <img src={logo} className=\"Logo-icon\" alt=\"logo\" />\r\n    </div>\r\n    <span className=\"Logo-title\">FOVA Energy</span>\r\n  </div>\r\n)\r\n\r\nexport default Logo;\r\n","import { message } from 'antd';\r\n\r\n/**\r\n * Type Definitions for HTTP request header and response data.\r\n */\r\ntype HeaderType = {\r\n  'X-CSRFToken': string;\r\n  'Content-Type': string;\r\n}\r\n\r\ntype SuccessResponseDataType = {\r\n  code: string;\r\n  body: any;\r\n}\r\n\r\ntype ErrorResponseDataType = {\r\n  code: string;\r\n  error: string;\r\n}\r\n\r\ntype ResponseDataType = SuccessResponseDataType | ErrorResponseDataType;\r\n\r\n/**\r\n * The only hard coded CSRF token, the rest should be extracted from cookies using parseCookies('csrf_token') after logging in\r\n */\r\nconst LOGIN_CSRFToken: string = \"ImI0M2ZlZjgxZmRiNTAwZWMxYmE4NDYzYjQzNTM1MDFmZTk5OWRjOGEi.Xyw2Iw.xYuZelp39q-HpjGf_abdtEdT-Ag\";\r\n\r\n/**\r\n * Utility function to get specific info from cookies\r\n * @param key : 'csrf_token' | 'session'\r\n * @returns : string - section of cookie\r\n */\r\nconst parseCookies = (key: string): string => {\r\n  let match = document.cookie.match(new RegExp('(^| )' + key + '=([^;]+)'));\r\n  if (match) {\r\n    let result = \"\";\r\n    try {\r\n      result = decodeURIComponent(match[2]);\r\n    } catch (error) {\r\n      console.warn(\"Cookie parse error: \", error);\r\n    }\r\n    return result;\r\n  };\r\n  return \"\";\r\n}\r\n\r\n/**\r\n * POST HTTP Request API\r\n * @param url : string - rooted at proxy in package.json, start with \r\n * @param requestData : string - JSON string, e.g. JSON.stringify(rawData)\r\n * @returns : Promise<ResponseDataType> - Promise resolves to JSON respond body\r\n */\r\nexport const post = async (url: string, requestData?: string): Promise<ResponseDataType> => {\r\n\r\n  let header: HeaderType = {\r\n    'X-CSRFToken': (url === '/api/account/login') ? LOGIN_CSRFToken : parseCookies('csrf_token'),\r\n    'Content-Type': 'application/json'\r\n  }\r\n\r\n  return fetch(url, {\r\n    method: 'POST',\r\n    headers: header,\r\n    body: requestData\r\n  })\r\n    .then((response: Response): Promise<any> => response.json())\r\n    .then((responseData: ResponseDataType) => {\r\n      if (responseData.code === 'OK') {\r\n        console.log('SUCCESS!', url, header, requestData, responseData);\r\n      } else {\r\n        console.warn('FAIL!', url, header, requestData, responseData);\r\n      }\r\n      return responseData;\r\n    });\r\n}\r\n\r\n/**\r\n * GET HTTP Request API\r\n * @param url : string - rooted at proxy in package.json, start with \r\n * @param requestData : string - JSON string, e.g. JSON.stringify(rawData)\r\n * @returns : Promise<ResponseDataType> - Promise resolves to JSON respond body\r\n */\r\nexport const get = async (url: string, requestData?: string): Promise<ResponseDataType> => {\r\n\r\n  let header: HeaderType = {\r\n    'X-CSRFToken': parseCookies('csrf_token'),\r\n    'Content-Type': 'application/json'\r\n  }\r\n\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    headers: header,\r\n    body: requestData\r\n  })\r\n    .then((response: Response): Promise<any> => response.json())\r\n    .then((responseData: ResponseDataType) => {\r\n      if (responseData.code === 'OK') {\r\n        console.log('SUCCESS!', url, header, requestData, responseData);\r\n      } else {\r\n        console.warn('FAIL!', url, header, requestData, responseData);\r\n      }\r\n      return responseData;\r\n    });\r\n}\r\n\r\n/**\r\n * Utility function to handle different error\r\n */\r\nexport const handleError = (errorCode: string, language: 'en-us' | 'zh-hans') => {\r\n\r\n  if (messageLanguageMap.get(errorCode) === undefined) {\r\n    message.error(messageLanguageMap.get(\"default\") + errorCode)\r\n  }\r\n\r\n  if (language === 'en-us') {\r\n    message.warn(messageLanguageMap.get(errorCode)?.[\"en-us\"]);\r\n  }\r\n  else if (language === 'zh-hans') {\r\n    message.warn(messageLanguageMap.get(errorCode)?.[\"zh-hans\"]);\r\n  }\r\n}\r\n\r\n/**\r\n * Error messages for corresponding error codes in Engish and Chinese\r\n */\r\ntype LanguageMapType = Map<string, { \"en-us\": string; \"zh-hans\": string }>;\r\nexport const messageLanguageMap: LanguageMapType = new Map([\r\n  [\"User Not Exist\",\r\n    {\r\n      \"en-us\": \"The credential you provided does not match our record. Please try again. \",\r\n      \"zh-hans\": \"您所提供的登录信息有误，请重试。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Password Error\",\r\n    {\r\n      \"en-us\": \"The credential you provided does not match our record. Please try again. \",\r\n      \"zh-hans\": \"您所提供的登录信息有误，请重试。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Login Required\",\r\n    {\r\n      \"en-us\": \"Login is required for this operation.\",\r\n      \"zh-hans\": \"此操作需要登录权限，请登录。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Product Not Allowed\",\r\n    {\r\n      \"en-us\": \"Product permission denied. Please contact administrator. \",\r\n      \"zh-hans\": \"您暂时没有使用此服务的权限，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Internal Server Error\",\r\n    {\r\n      \"en-us\": \"Internal Server Error. Please contact administrator. \",\r\n      \"zh-hans\": \"系统内部错误，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"External Error\",\r\n    {\r\n      \"en-us\": \"External Error. Please contact administrator. \",\r\n      \"zh-hans\": \"系统外部错误，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Method Not Allowed\",\r\n    {\r\n      \"en-us\": \"HTTP method Error. Please contact administrator. \",\r\n      \"zh-hans\": \"无效的HTTP请求，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"defualt\",\r\n    {\r\n      \"en-us\": \"An unkown error has occured, CODE: \",\r\n      \"zh-hans\": \"未知错误，错误码：\"\r\n    }\r\n  ]\r\n])\r\n","import React from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  GlobalOutlined,\r\n  LogoutOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/TopBar.css';\r\n\r\nimport Logo from 'components/Logo';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Header } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\ntype PropsType = {\r\n  authorized: boolean;\r\n  language: 'en-us' | 'zh-hans';\r\n  handleSignout: () => void;\r\n  switchLanguage: (inputLanguage: 'en-us' | 'zh-hans') => void;\r\n}\r\n\r\nclass TopBar extends React.Component<PropsType> {\r\n\r\n  handleSelectLanguage = (event: any) => {\r\n    this.props.switchLanguage(event.key);\r\n  }\r\n\r\n  handleClickLogout = () => {\r\n    APIUtils.post('/api/account/logout')\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.props.handleSignout();\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      });\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n\r\n    const userMenu = (\r\n      <Menu.Item\r\n        key=\"menu-signout\"\r\n        icon={<LogoutOutlined height=\"3em\" />}\r\n        style={{ float: \"right\" }}\r\n        onClick={this.handleClickLogout}\r\n      >\r\n        {this.enzh('Sign Out', '退出登录')}\r\n      </Menu.Item>\r\n    )\r\n\r\n    return (\r\n      <div className=\"TopBar\">\r\n        <Header className=\"header\">\r\n          <Logo />\r\n          <Menu theme=\"dark\" mode=\"horizontal\">\r\n            {this.props.authorized ? userMenu : null}\r\n            <SubMenu\r\n              key=\"menu-language\"\r\n              icon={<GlobalOutlined height=\"3em\" />}\r\n              title={this.enzh('Intl-English', 'Intl-简体中文')}\r\n              style={{ float: \"right\" }}\r\n            >\r\n              <Menu.Item key=\"zh-hans\" onClick={this.handleSelectLanguage}>简体中文</Menu.Item>\r\n              <Menu.Item key=\"en-us\" onClick={this.handleSelectLanguage}>English - US</Menu.Item>\r\n            </SubMenu>\r\n          </Menu>\r\n        </Header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\n\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\nimport 'styles/Signin.css';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\ntype PropsType = {\r\n  handleSignin: () => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass Signin extends React.Component<PropsType> {\r\n\r\n  onFinish = (values: any) => {\r\n    let signinData = {\r\n      name: values.username,\r\n      password: values.password\r\n    }\r\n\r\n    APIUtils.post('/api/account/login', JSON.stringify(signinData))\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.props.handleSignin();\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Signin\">\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-form\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={this.onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[{\r\n              required: true,\r\n              message: this.props.language === 'en-us' ?\r\n                \"Please input your name\" :\r\n                \"请输入用户名\"\r\n            }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder={\r\n                this.props.language === 'en-us' ?\r\n                  \"Name\" : \"用户名\"\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{\r\n              required: true,\r\n              message: this.props.language === 'en-us' ?\r\n                \"Please input your Password\" :\r\n                \"请输入登录口令\"\r\n            }]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              placeholder={\r\n                this.props.language === 'en-us' ?\r\n                  \"Password\" : \"登录口令\"\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Form.Item name=\"remember\" valuePropName=\"unchecked\" noStyle>\r\n              <Checkbox>\r\n                {this.props.language === 'en-us' ? 'Remember me' : '保存登录信息'}\r\n              </Checkbox>\r\n            </Form.Item>\r\n            <a href=\"/\" onClick={e => e.preventDefault()} className=\"login-form-portal\">\r\n              {this.props.language === 'en-us' ? 'Administartor Portal' : '管理员通道'}\r\n            </a>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n              {this.props.language === 'en-us' ? \"Log in\" : \"登录\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\n\r\nimport 'styles/DashboardCharts.css';\r\n\r\nclass DashboardCharts extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"DashboardCharts\">\r\n        <Row gutter={16}>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardCharts;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n  DatePicker,\r\n  Form,\r\n  Input,\r\n  Radio,\r\n  Button,\r\n  Select,\r\n  Switch,\r\n  Upload\r\n} from \"antd\";\r\nimport { InboxOutlined } from \"@ant-design/icons\";\r\n\r\n// import UploadController from \"./UploadController\";\r\nimport 'styles/UploadForm.css';\r\n\r\n// Ant Design Form Components API: ant.design/components/form/#header\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 6\r\n  },\r\n  wrapperCol: {\r\n    span: 14\r\n  }\r\n};\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\n\r\n// function UploadControllerWrapper(props) {\r\n//   if (!props.begin) {\r\n//     return null;\r\n//   }\r\n\r\n//   if (!props.file === null) {\r\n//     alert(\"Please select a file to continue.\");\r\n//     return null;\r\n//   }\r\n\r\n//   return (\r\n//     <UploadController file={props.file} />\r\n//   );\r\n// }\r\n\r\ntype PropsType = {\r\n  tab: string;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  isAccident: boolean;\r\n  uploadInProgress: boolean;\r\n  fileData: any;\r\n}\r\n\r\nclass UploadForm extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      isAccident: false,\r\n      uploadInProgress: false,\r\n      fileData: null\r\n    };\r\n  }\r\n\r\n  setAccident = (checked: boolean) => {\r\n    this.setState({ isAccident: checked });\r\n  }\r\n\r\n  onSubmit = () => {\r\n    this.setState({\r\n      uploadInProgress: true\r\n    });\r\n  };\r\n\r\n  loadFile = (e: any) => {\r\n    this.setState({\r\n      fileData: e.file\r\n    });\r\n\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Upload\">\r\n          <div className=\"upload-form\">\r\n            <Form name=\"validate_other\" {...formItemLayout} onFinish={this.onSubmit}>\r\n\r\n              <Form.Item label=\"Upload Name\" name=\"name\">\r\n                <Input placeholder=\"Custom name for this dataset (Optional)\" />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Upload Remarks\" name=\"note\">\r\n                <TextArea rows={3} placeholder=\"Description and remarks of this dataset (Optional)\" />\r\n              </Form.Item>\r\n\r\n              {/* <Form.Item\r\n                label=\"Select Service\"\r\n                name=\"service\"\r\n              // rules={[\r\n              //   { required: true, message: \"Please select a service to continue.\" }\r\n              // ]}\r\n              >\r\n                <Radio.Group>\r\n                  <Radio.Button value=\"ev\">EV Operation</Radio.Button>\r\n                  <Radio.Button value=\"ess\">ESS Operation</Radio.Button>\r\n                  <Radio.Button value=\"cell\">Cell Long-term Performance Testing</Radio.Button>\r\n                </Radio.Group>\r\n              </Form.Item> */}\r\n\r\n              <Form.Item label=\"Upload ID Tag\" name=\"idtag\">\r\n                <Select mode=\"tags\" style={{ width: '100%' }} placeholder=\"Upload Tag (Optional)\">\r\n                  <Option key=\"ev1\" value=\"EV1\">EV1</Option>\r\n                  <Option key=\"ess1\" value=\"ESS1\">ESS1</Option>\r\n                  <Option key=\"cb1\" value=\"Cell Batch 1\">Cell Batch 1</Option>\r\n                </Select>\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Accident Data\" name=\"isAccident\" valuePropName=\"checked\">\r\n                <Switch checkedChildren=\"Yes\" unCheckedChildren=\"No\" onChange={this.setAccident} />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Accident Date\" name=\"accidentDate\">\r\n                <DatePicker\r\n                  disabled={!this.state.isAccident}\r\n                  disabledDate={current => current.isAfter(moment())} />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Accident Description\" name=\"accidentNote\">\r\n                <TextArea\r\n                  rows={3}\r\n                  style={{ width: '100%' }}\r\n                  disabled={!this.state.isAccident}\r\n                  placeholder=\"Relevant infomations about this accident. (Optional)\" />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Data Format\" name=\"format\">\r\n                <Radio.Group>\r\n                  <Radio.Button value=\"ev\">csv</Radio.Button>\r\n                  <Radio.Button value=\"ess\">mat</Radio.Button>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Upload File\"\r\n                rules={[\r\n                  { required: true, message: \"Please upload dataset to continue. \" }\r\n                ]}\r\n              >\r\n                <Form.Item\r\n                  name=\"dragger\"\r\n                  valuePropName=\"fileList\"\r\n                  getValueFromEvent={this.loadFile}\r\n                  noStyle\r\n                >\r\n                  <Upload.Dragger\r\n                    name=\"files\"\r\n                    beforeUpload={(file, fileList) => false}\r\n                  >\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                      <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">\r\n                      Click or drag file to this area to upload\r\n                    </p>\r\n                  </Upload.Dragger>\r\n                </Form.Item>\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                wrapperCol={{\r\n                  span: 12,\r\n                  offset: 6\r\n                }}\r\n              >\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  disabled={\r\n                    this.state.fileData === null ? true : false\r\n                  }\r\n                  loading={\r\n                    this.state.uploadInProgress ? true : false\r\n                  }\r\n                >\r\n                  {this.state.uploadInProgress ? \"Upload In Progress\" : \"Start Upload\"}\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </div>\r\n        {/* <UploadControllerWrapper\r\n          begin={this.state.uploadInProgress}\r\n          file={this.state.fileData}\r\n        /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadForm;","import React from 'react';\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  Table,\r\n  Tag,\r\n  Input,\r\n  Popover,\r\n  Dropdown,\r\n  Menu,\r\n  DatePicker,\r\n} from 'antd';\r\n\r\nimport {\r\n  CloudUploadOutlined,\r\n  UnorderedListOutlined,\r\n  FilterOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/DashboardTable.css';\r\n\r\nimport UploadForm from 'components/UploadForm';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Search } = Input;\r\nconst { RangePicker } = DatePicker;\r\n\r\ntype PropsType = {\r\n  tab: string;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  drawerVisible: boolean\r\n}\r\n\r\nclass DashboardTable extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      drawerVisible: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    let productName: string = \"\";\r\n    switch (this.props.tab) {\r\n      case \"EVL Management\":\r\n        productName = \"ev\";\r\n        break;\r\n      case \"ESS Management\":\r\n        productName = \"ess\"\r\n        break;\r\n      case \"R&amp;D Management\":\r\n        productName = \"r&d\"\r\n        break;\r\n    }\r\n\r\n    let requestData = {\r\n      product: productName\r\n    }\r\n\r\n    APIUtils.get('/api/data/upload/list', JSON.stringify(requestData))\r\n    .catch(err => {\r\n      console.warn(err);\r\n      APIUtils.handleError(err, this.props.language);\r\n    })\r\n  }\r\n\r\n  openDrawer = () => {\r\n    this.setState({\r\n      drawerVisible: true\r\n    });\r\n  }\r\n\r\n  onDrawerClose = () => {\r\n    this.setState({\r\n      drawerVisible: false\r\n    });\r\n  }\r\n\r\n  mockFormColumns = [\r\n    { title: 'File Name', dataIndex: 'name', key: 'name' },\r\n    { title: 'File ID', dataIndex: 'fileID', key: 'fileID' },\r\n    { title: 'Upload Time', dataIndex: 'uploadTime', key: 'uploadTime' },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (status: string) => {\r\n        if (status.length === 0) {\r\n          return \"\";\r\n        } else {\r\n          return <Tag color=\"green\">{status}</Tag>\r\n        }\r\n      }\r\n    },\r\n    {\r\n      title: 'Action',\r\n      dataIndex: 'action',\r\n      key: 'x',\r\n      render: () => (\r\n        <Dropdown overlay={this.bulkActionMenu}>\r\n          <a href=\"/\" onClick={e => e.preventDefault()}>Choose Action</a>\r\n        </Dropdown>\r\n      )\r\n    },\r\n  ];\r\n\r\n  mockFormData = [\r\n    {\r\n      key: 1,\r\n      name: 'data05.csv',\r\n      fileID: \"202008UD425690411\",\r\n      uploadTime: '16 July 2020, 03:21:48 PST',\r\n      status: 'Completed',\r\n      action: <a href=\"/#\">Select Algorithm</a>,\r\n    },\r\n    {\r\n      key: 2,\r\n      name: 'data04.tar.gz',\r\n      fileID: \"200723UD425697810\",\r\n      uploadTime: '11 May 2020, 14:26:03 PST',\r\n      status: 'Completed',\r\n    },\r\n    {\r\n      key: 3,\r\n      name: 'randfilegen.py',\r\n      fileID: \"200808UD425693511\",\r\n      uploadTime: '29 Feb 2020, 20:11:23 PST',\r\n      status: 'Completed',\r\n    },\r\n    {\r\n      key: 4,\r\n      name: 'data-depricated.tar.gz',\r\n      fileID: \"2012723UD42569045\",\r\n      uploadTime: '14 Feb 2020, 21:00:23 PST',\r\n      status: 'Completed',\r\n    },\r\n    {\r\n      key: 5,\r\n      name: 'data03.csv',\r\n      fileID: \"2008UD42569081564\",\r\n      uploadTime: '25 Jan 2020, 09:15:02 PST',\r\n      status: 'Completed',\r\n    },\r\n    {\r\n      key: 6,\r\n      name: 'data01.csv',\r\n      fileID: \"200536UD425690763\",\r\n      uploadTime: '14 Jan 2020, 12:59:40 PST',\r\n      status: 'Completed',\r\n    },\r\n    {\r\n      key: 7,\r\n      name: 'data01.csv',\r\n      fileID: \"200458UD425690885\",\r\n      uploadTime: '02 Jan 2020, 20:07:23 PST',\r\n      status: 'Completed',\r\n    },\r\n    {\r\n      key: 8,\r\n      name: 'deprecated_bat.csv',\r\n      fileID: \"200458UD425690885\",\r\n      uploadTime: '15 Dec 2019, 21:51:09 PST',\r\n      status: 'Completed',\r\n    },\r\n    {\r\n      key: 9,\r\n      name: 'accident_report.csv',\r\n      fileID: \"200458UD425690885\",\r\n      uploadTime: '11 Nov 2019, 04:22:15 PST',\r\n      status: 'Completed',\r\n    }\r\n  ];\r\n\r\n  bulkActionMenu = (\r\n    <Menu>\r\n      <Menu.Item key=\"bulk-choose-algo\">Choose Algorithm</Menu.Item>\r\n      <Menu.Item key=\"bulk-view-result\">View Result</Menu.Item>\r\n    </Menu>\r\n  )\r\n\r\n  filterPopup = (\r\n    <div>\r\n      <RangePicker />\r\n    </div>\r\n  )\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"DashboardTable\">\r\n        <Button\r\n          className=\"table-button\"\r\n          type=\"primary\"\r\n          shape=\"round\"\r\n          icon={<CloudUploadOutlined />}\r\n          onClick={this.openDrawer}\r\n        >\r\n          New Upload\r\n        </Button>\r\n\r\n        <Dropdown overlay={this.bulkActionMenu} trigger={['click']}>\r\n          <Button\r\n            className=\"table-button\"\r\n            shape=\"round\"\r\n            icon={<UnorderedListOutlined />}\r\n          >\r\n            Bulk Action\r\n        </Button>\r\n        </Dropdown>\r\n\r\n        <Popover\r\n          placement=\"bottomLeft\"\r\n          content={this.filterPopup}\r\n          trigger=\"click\"\r\n        >\r\n          <Button\r\n            className=\"table-button\"\r\n            shape=\"round\"\r\n            icon={<FilterOutlined />}\r\n          >\r\n            Filter\r\n          </Button>\r\n        </Popover>\r\n\r\n        <Search\r\n          onSearch={value => console.log(value)}\r\n          size=\"small\"\r\n          style={{\r\n            width: 200,\r\n            padding: \"5px\",\r\n          }}\r\n        />\r\n        <Table\r\n          size=\"middle\"\r\n          rowSelection={{}}\r\n          pagination={{ pageSize: 7 }}\r\n          columns={this.mockFormColumns}\r\n          dataSource={this.mockFormData}\r\n        />\r\n        <Drawer\r\n          title=\"Start New Upload Session\"\r\n          width={720}\r\n          onClose={this.onDrawerClose}\r\n          visible={this.state.drawerVisible}\r\n          bodyStyle={{ paddingBottom: 80 }}\r\n          // footer={\r\n          //   <div\r\n          //     style={{\r\n          //       textAlign: 'right',\r\n          //     }}\r\n          //   >\r\n          //     <Button onClick={this.onDrawerClose} style={{ marginRight: 8 }}>\r\n          //       Cancel\r\n          //     </Button>\r\n          //     <Button onClick={this.onDrawerClose} type=\"primary\">\r\n          //       Submit\r\n          //     </Button>\r\n          //   </div>\r\n          // }\r\n        >\r\n          <UploadForm\r\n            tab={this.props.tab}\r\n            language={this.props.language}\r\n          />\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardTable;\r\n","import React from 'react';\r\nimport {\r\n  PageHeader,\r\n  Button,\r\n  Divider,\r\n  Descriptions,\r\n  Tag,\r\n  Badge,\r\n} from 'antd';\r\nimport {\r\n  ExportOutlined,\r\n  BellOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/DashboardMain.css';\r\n\r\nimport DashboardCharts from 'components/DashboardCharts';\r\nimport DashboardTable from 'components/DashboardTable';\r\n\r\ntype PropsType = {\r\n  tab: string;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass DashboardMain extends React.Component<PropsType> {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"DashboardMain\">\r\n        <PageHeader\r\n          ghost={false}\r\n          title={this.props.tab}\r\n          tags={<Tag color=\"orange\">Admin</Tag>}\r\n          subTitle={`Manage ${this.props.tab.split(' ')[0]} upload items`}\r\n          extra={[\r\n            <Button\r\n              key=\"upload-button\"\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              icon={<ExportOutlined />}\r\n            >\r\n              Export\r\n            </Button>,\r\n            <Badge dot\r\n              key=\"notification-badge\">\r\n              <Button\r\n                key=\"notification-button\"\r\n                shape=\"circle\"\r\n                icon={<BellOutlined />}\r\n              />\r\n          </Badge>\r\n          ]}\r\n          style={{\r\n            padding: '0px 5px 15px'\r\n          }}\r\n        >\r\n          <Descriptions size=\"small\" column={3} style={{ paddingTop: \"3px\" }}>\r\n            <Descriptions.Item label=\"Owner\">Test User</Descriptions.Item>\r\n            <Descriptions.Item label=\"Association\">\r\n              421421\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Remarks\">\r\n              Admin permission\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n        </PageHeader>\r\n        <DashboardCharts />\r\n        <Divider orientation=\"left\">Manage Uploads</Divider>\r\n        <DashboardTable\r\n          tab={this.props.tab}\r\n          language={this.props.language}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardMain;\r\n","import React from 'react';\r\n\r\nimport { Layout, Menu, Breadcrumb, } from 'antd';\r\nimport {\r\n  SisternodeOutlined,\r\n  ExperimentOutlined,\r\n  NodeIndexOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/Dashboard.css';\r\n\r\nimport DashboardMain from 'components/DashboardMain';\r\n\r\n// const { SubMenu } = Menu;\r\nconst { Content, Sider, Footer } = Layout;\r\n\r\ntype PropsType = {\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  tab: string;\r\n}\r\n\r\nclass Dashboard extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      tab: 'EVL Management'\r\n    }\r\n  }\r\n\r\n  handleSelect = (event: any) => {\r\n    this.setState({\r\n      tab: event.key\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Dashboard\">\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <Breadcrumb style={{ margin: '16px 0' }}>\r\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n            <Breadcrumb.Item>{this.state.tab}</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\r\n            <Sider className=\"site-layout-background\" width={220}>\r\n              <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={['EVL Management']}\r\n                onSelect={this.handleSelect}\r\n                style={{ height: \"100%\" }}\r\n              >\r\n                <Menu.Item\r\n                  key=\"EVL Management\"\r\n                  icon={<SisternodeOutlined />}\r\n                >\r\n                  EVL Management\r\n                </Menu.Item>\r\n\r\n                <Menu.Item\r\n                  key=\"ESS Management\"\r\n                  icon={<NodeIndexOutlined />}\r\n                >\r\n                  ESS Management\r\n                </Menu.Item>\r\n\r\n                <Menu.Item\r\n                  key=\"R&amp;D Management\"\r\n                  icon={<ExperimentOutlined />}\r\n                >\r\n                  R&amp;D Management\r\n                </Menu.Item>\r\n              </Menu>\r\n            </Sider>\r\n\r\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n              <DashboardMain\r\n                tab={this.state.tab}\r\n                language={this.props.language}\r\n              />\r\n            </Content>\r\n\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>{\"Fova Energy ©2020\"}</Footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router';\r\nimport { Layout } from 'antd';\r\n\r\nimport 'styles/App.css';\r\n\r\nimport TopBar from 'components/TopBar';\r\nimport Signin from 'components/Signin';\r\nimport Dashboard from 'components/Dashboard';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\ntype StateType = {\r\n  authorized: boolean;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass App extends React.Component<{}, StateType> {\r\n\r\n  state: StateType;\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = {\r\n      authorized: false,\r\n      language: 'en-us' as const\r\n    }\r\n\r\n    this.handleSignin = this.handleSignin.bind(this);\r\n    this.handleSignout = this.handleSignout.bind(this);\r\n    this.switchLanguage = this.switchLanguage.bind(this);\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    APIUtils.get('/api/account/user/info')\r\n    .then(responseData => {\r\n      if (responseData.code === 'OK') {\r\n        this.setState({\r\n          authorized: true\r\n        });\r\n      }\r\n    })\r\n    .catch(() => {\r\n      this.setState({\r\n        authorized: false\r\n      })\r\n    })\r\n  }\r\n\r\n  handleSignin = () => {\r\n    this.setState({\r\n      authorized: true\r\n    });\r\n  }\r\n\r\n  handleSignout = () => {\r\n    this.setState({\r\n      authorized: false\r\n    });\r\n  }\r\n\r\n\r\n  switchLanguage = (inputLanguage: StateType[\"language\"]) => {\r\n    this.setState({\r\n      language: inputLanguage\r\n    });\r\n  }\r\n\r\n  mountSignin = () => {\r\n    return this.state.authorized ?\r\n      <Redirect to=\"/home\" /> :\r\n      <Signin\r\n        handleSignin={this.handleSignin}\r\n        language={this.state.language}\r\n      />\r\n  }\r\n\r\n  mountDashboard = () => {\r\n    return this.state.authorized ?\r\n    <Dashboard language={this.state.language} /> :\r\n    <Redirect to=\"/signin\" />\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Layout>\r\n          <TopBar\r\n            authorized={this.state.authorized}\r\n            language={this.state.language}\r\n            handleSignout={this.handleSignout}\r\n            switchLanguage={this.switchLanguage}\r\n          />\r\n        <Switch>\r\n          <Route exact path=\"/\" render={this.mountSignin} />\r\n          {/* <Route exact path=\"/\" render={this.mountDashboard} /> */}\r\n          <Route path=\"/signin\" render={this.mountSignin} />\r\n          <Route path=\"/home\" render={this.mountDashboard} />\r\n          <Route render={this.mountSignin} />\r\n        </Switch>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport 'styles/index.css';\r\n\r\nimport App from 'components/App';\r\nimport * as serviceWorker from 'serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n  , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}