{"version":3,"sources":["assets/logo.svg","utils/api-utils.tsx","components/Signin.tsx","components/DashboardCharts.tsx","components/AlgorithmController.tsx","components/DashboardTable.tsx","components/DashboardMain.tsx","components/UploadController.tsx","components/UploadSession.tsx","components/Dashboard.tsx","components/UploadPortal.tsx","components/Logo.tsx","components/TopBar.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","parseCookies","key","match","document","cookie","RegExp","result","decodeURIComponent","error","console","warn","queryString","params","Object","keys","map","encodeURIComponent","join","post","url","requestData","a","header","fetch","method","headers","body","then","response","json","responseData","code","log","get","undefined","handleError","errorCode","language","messageLanguageMap","message","ProductsInfo","productId","productName","productDescription","Map","Signin","onFinish","values","signinData","name","username","password","APIUtils","JSON","stringify","props","handleSignin","enzh","english","chinese","className","initialValues","remember","this","Item","rules","required","prefix","UserOutlined","placeholder","LockOutlined","type","valuePropName","noStyle","href","onClick","e","preventDefault","htmlType","React","Component","DashboardCharts","gutter","span","Option","Select","AlgorithmController","handleSelectAlgo","value","selectedAlgo","state","algorithmList","find","algo","algo_name","setState","selectedAlgoId","id","handleStartAnalyze","requestBody","upload_id","targetFileId","algo_id","algorithmControl","handleCancel","requestParams","data","items","title","visible","centered","onCancel","footer","style","margin","onChange","Search","Input","RangePicker","DatePicker","DashboardTable","timeRange","on","getFileList","product","tab","uploadList","forEach","uploadItem","fileList","filteredFileList","refresh","onSearch","filter","record","upload_name","includes","handleSelectFile","fileName","selectedFile","file","file_name","selectTimeRange","applyTimeRange","moment","unix","created_at","isBetween","algoList","prevProps","prevState","uploadInProgress","bulkActionMenu","filterPopup","showTime","format","ranges","startOf","allowClear","disabledDate","current","endOf","onOk","formColumns","dataIndex","render","text","Date","toString","split","splice","color","shape","icon","CloudUploadOutlined","drawerControl","overlay","trigger","UnorderedListOutlined","placement","content","FilterOutlined","size","width","padding","ReloadOutlined","rowSelection","pagination","pageSize","columns","dataSource","DashboardMain","zhtab","ghost","tags","subTitle","slice","length","extra","ExportOutlined","dot","BellOutlined","column","paddingTop","label","userInfo","remark","orientation","UploadController","componentDidMount","modalVisible","getFileMD5","fileMD5","fileKey","file_info","file_key","file_size","uploadName","err","awsMetaData","s3Client","getS3Client","authorization","step","progress","uploadFile","md5Hash","Promise","resolve","reject","blobSlice","File","prototype","chunks","Math","ceil","currentChunk","spark","SparkMD5","ArrayBuffer","fileReader","FileReader","loadNext","start","end","readAsArrayBuffer","call","onload","append","target","parseFloat","toFixed","onerror","onabort","cognitoIdentityCredentials","credentials","AWS","CognitoIdentityCredentials","IdentityPoolId","identity_pool_id","IdentityId","identity_id","Logins","token","config","update","region","S3","apiVersion","maxRetries","httpOptions","connectTimeout","timeout","uploadConfig","Key","Bucket","bucket","UploadId","remote_upload_id","uploadPart","parts","fullPartInfo","assign","asyncS3Fetch","completeUpload","s3","fileId","partInfo","i","push","PartNumber","ETag","Body","Uint8Array","recordPart","partNumber","partETag","partSize","part_number","part_etag","part_size","uploadId","etag","location","functionName","handleClose","uploadControl","closable","maskClosable","status","percent","strokeColor","showInfo","resumeUpload","TextArea","confirm","Modal","UploadSession","formItemLayout","formRef","inputUploadName","selectService","serviceType","setAccident","checked","isAccident","onSubmit","service","loadFile","fileData","Array","isArray","unfinishedUpload","unfinishedUploadName","labelCol","wrapperCol","createRef","ExclamationCircleOutlined","setFieldsValue","okText","cancelText","uploadTagOptions","forceRender","drawerVisible","onClose","destroyOnClose","bodyStyle","paddingBottom","textAlign","marginRight","validateFields","catch","errorInfo","disabled","ref","rows","initialValue","mode","checkedChildren","unCheckedChildren","isAfter","getValueFromEvent","Dragger","beforeUpload","InboxOutlined","offset","Content","Layout","Sider","Footer","Dashboard","handleSelect","event","defaultSelectedKeys","onSelect","height","SisternodeOutlined","NodeIndexOutlined","ExperimentOutlined","minHeight","UploadPortal","resumeUploadControl","loading","Logo","src","logo","alt","Header","SubMenu","Menu","TopBar","handleSelectLanguage","switchLanguage","handleClickLogout","handleSignout","userMenu","LogoutOutlined","float","theme","authorized","GlobalOutlined","App","inputLanguage","mountSignin","to","mountDashboard","mountUploadPortal","bind","exact","path","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e17145e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import { message } from 'antd';\r\n\r\n/**\r\n * Type Definitions for HTTP request header and response data.\r\n */\r\ntype HeaderType = {\r\n  'X-CSRFToken': string;\r\n  'Content-Type': string;\r\n}\r\n\r\nexport type SuccessResponseDataType = {\r\n  code: string;\r\n  data: any;\r\n}\r\n\r\nexport type ErrorResponseDataType = {\r\n  code: string;\r\n  error: string;\r\n}\r\n\r\ntype ResponseDataType = SuccessResponseDataType | ErrorResponseDataType;\r\ninterface ParamsType { [key: string]: string | number };\r\n\r\n/**\r\n * The only hard coded CSRF token, the rest should be extracted from cookies using parseCookies('csrf_token') after logging in\r\n */\r\nconst LOGIN_CSRFToken: string = \"ImI0M2ZlZjgxZmRiNTAwZWMxYmE4NDYzYjQzNTM1MDFmZTk5OWRjOGEi.Xyw2Iw.xYuZelp39q-HpjGf_abdtEdT-Ag\";\r\n\r\n/**\r\n * Utility function to get specific info from cookies\r\n * @param key : 'csrf_token' | 'session'\r\n * @returns : string - section of cookie\r\n */\r\nconst parseCookies = (key: string): string => {\r\n  let match = document.cookie.match(new RegExp('(^| )' + key + '=([^;]+)'));\r\n  if (match) {\r\n    let result = \"\";\r\n    try {\r\n      result = decodeURIComponent(match[2]);\r\n    } catch (error) {\r\n      console.warn(\"Cookie parse error: \", error);\r\n    }\r\n    return result;\r\n  };\r\n  return \"\";\r\n}\r\n\r\n/**\r\n * Generate query string from parameters object for GET request URL\r\n * @param params : { [key: string]: string | number } - parameters object\r\n */\r\nconst queryString = (params: ParamsType): string =>\r\n  Object.keys(params).map((key: string): string =>\r\n    encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\r\n  ).join('&');\r\n\r\n/**\r\n * POST HTTP Request API\r\n * @param url : string - rooted at proxy in package.json, start with \r\n * @param requestData : string - JSON string, e.g. JSON.stringify(rawData)\r\n * @returns : Promise<ResponseDataType> - Promise resolves to JSON respond body\r\n */\r\nexport const post = async (url: string, requestData?: string): Promise<ResponseDataType> => {\r\n\r\n  let header: HeaderType = {\r\n    'X-CSRFToken': (url === '/api/account/login') ? LOGIN_CSRFToken : parseCookies('csrf_token'),\r\n    'Content-Type': 'application/json'\r\n  }\r\n\r\n  return fetch(url, {\r\n    method: 'POST',\r\n    headers: header,\r\n    body: requestData\r\n  })\r\n    .then((response: Response): Promise<any> => response.json())\r\n    .then((responseData: ResponseDataType) => {\r\n      if (responseData.code === 'OK') {\r\n        console.log('SUCCESS!', url, header, requestData, responseData);\r\n      } else {\r\n        console.warn('FAIL!', url, header, requestData, responseData);\r\n      }\r\n      return responseData;\r\n    });\r\n}\r\n\r\n/**\r\n * GET HTTP Request API\r\n * @param url : string - rooted at proxy in package.json, start with \"/\"\r\n * @returns : Promise<ResponseDataType> - Promise resolves to JSON respond body\r\n */\r\nexport const get = async (url: string, params?: ParamsType): Promise<ResponseDataType> => {\r\n\r\n  if (params !== undefined) {\r\n    url = url + '?' + queryString(params);\r\n  }\r\n\r\n  return fetch(url, {\r\n    method: 'GET'\r\n  })\r\n    .then((response: Response): Promise<any> => response.json())\r\n    .then((responseData: ResponseDataType) => {\r\n      if (responseData.code === 'OK') {\r\n        console.log('SUCCESS!', url, responseData);\r\n      } else {\r\n        console.warn('FAIL!', url, responseData);\r\n      }\r\n      return responseData;\r\n    });\r\n}\r\n\r\n/**\r\n * Utility function to handle different error\r\n */\r\nexport const handleError = (errorCode: string, language: 'en-us' | 'zh-hans') => {\r\n\r\n  if (messageLanguageMap.get(errorCode) === undefined) {\r\n    message.error(messageLanguageMap.get(\"default\") + errorCode)\r\n    return;\r\n  }\r\n\r\n  if (language === 'en-us') {\r\n    message.warn(messageLanguageMap.get(errorCode)?.[\"en-us\"]);\r\n  }\r\n  else if (language === 'zh-hans') {\r\n    message.warn(messageLanguageMap.get(errorCode)?.[\"zh-hans\"]);\r\n  }\r\n}\r\n\r\n/**\r\n * Product informations defined in API\r\n */\r\ninterface ProductsInfoType {\r\n  [key: string]: {\r\n    productId: number,\r\n    productName: string,\r\n    productDescription: string\r\n  }\r\n}\r\nexport const ProductsInfo: ProductsInfoType = {\r\n  \"EV Management\": {\r\n    productId: 1,\r\n    productName: \"ev\",\r\n    productDescription: \"EV\"\r\n  },\r\n  \"ESS Management\": {\r\n    productId: 2,\r\n    productName: \"ess\",\r\n    productDescription: \"ESS\"\r\n  },\r\n  \"R&D Management\": {\r\n    productId: 3,\r\n    productName: \"rd\",\r\n    productDescription: \"RD\"\r\n  }\r\n}\r\n\r\n/**\r\n * Error messages for corresponding error codes in Engish and Chinese\r\n */\r\ntype LanguageMapType = Map<string, { \"en-us\": string; \"zh-hans\": string }>;\r\nexport const messageLanguageMap: LanguageMapType = new Map([\r\n  [\"User Not Exist\",\r\n    {\r\n      \"en-us\": \"The credential you provided does not match our record. Please try again. \",\r\n      \"zh-hans\": \"您所提供的登录信息有误，请重试。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Password Error\",\r\n    {\r\n      \"en-us\": \"The credential you provided does not match our record. Please try again. \",\r\n      \"zh-hans\": \"您所提供的登录信息有误，请重试。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Login Required\",\r\n    {\r\n      \"en-us\": \"Login is required for this operation.\",\r\n      \"zh-hans\": \"此操作需要登录权限，请登录。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Product Not Allow\",\r\n    {\r\n      \"en-us\": \"Product permission denied. Please contact administrator. \",\r\n      \"zh-hans\": \"您暂时没有使用此服务的权限，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Internal Server Error\",\r\n    {\r\n      \"en-us\": \"Internal Server Error. Please contact administrator. \",\r\n      \"zh-hans\": \"系统内部错误，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"External Error\",\r\n    {\r\n      \"en-us\": \"External Error. Please contact administrator. \",\r\n      \"zh-hans\": \"系统外部错误，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Method Not Allowed\",\r\n    {\r\n      \"en-us\": \"HTTP method Error. Please contact administrator. \",\r\n      \"zh-hans\": \"无效的HTTP请求，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"defualt\",\r\n    {\r\n      \"en-us\": \"An unkown error has occured, CODE: \",\r\n      \"zh-hans\": \"未知错误，错误码：\"\r\n    }\r\n  ]\r\n])\r\n","import React from 'react';\r\n\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\nimport 'styles/signin.css';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\ntype PropsType = {\r\n  handleSignin: () => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass Signin extends React.Component<PropsType> {\r\n\r\n  onFinish = (values: any) => {\r\n    let signinData = {\r\n      name: values.username,\r\n      password: values.password\r\n    }\r\n\r\n    APIUtils.post('/api/account/login', JSON.stringify(signinData))\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.props.handleSignin();\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      })\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Signin\">\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-form\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={this.onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[{\r\n              required: true,\r\n              message: this.enzh(\"Please input your name\", \"请输入用户名\")\r\n            }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder={this.enzh(\"Name\", \"用户名\")}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{\r\n              required: true,\r\n              message: this.enzh(\"Please input your Password\", \"请输入登录口令\")\r\n            }]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              placeholder={this.enzh(\"Password\", \"登录口令\")}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Form.Item name=\"remember\" valuePropName=\"unchecked\" noStyle>\r\n              <Checkbox>\r\n                {this.enzh('Remember me', '保存登录信息')}\r\n              </Checkbox>\r\n            </Form.Item>\r\n            <a href=\"/\" onClick={e => e.preventDefault()} className=\"login-form-portal\">\r\n              {this.enzh('Administartor Portal', '管理员通道')}\r\n            </a>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n              {this.enzh(\"Log in\", \"登录\")}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\n\r\nimport 'styles/dashboardCharts.css';\r\n\r\nclass DashboardCharts extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"DashboardCharts\">\r\n        <Row gutter={16}>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardCharts;\r\n","import React from 'react';\r\nimport {\r\n  message,\r\n  Modal,\r\n  Button,\r\n  Select\r\n} from 'antd';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Option } = Select;\r\n\r\ntype PropsType = {\r\n  targetFileId: string;\r\n  algorithmControl: (on: boolean) => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  algorithmList: any[];\r\n  selectedAlgoId: string;\r\n}\r\n\r\nclass AlgorithmController extends React.Component<PropsType, StateType> {\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      algorithmList: [],\r\n      selectedAlgoId: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let requestParams = {\r\n      upload_id: this.props.targetFileId\r\n    }\r\n    APIUtils.get('/api/data/algorithm/list', requestParams)\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.setState({\r\n            algorithmList: (response as APIUtils.SuccessResponseDataType).data.items\r\n          });\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      });\r\n  }\r\n\r\n  handleSelectAlgo = (value: string) => {\r\n    let selectedAlgo = this.state.algorithmList.find(algo => algo.algo_name === value);\r\n    if (selectedAlgo === undefined) {\r\n      console.warn(\"Cannot find \", value, \"in\", this.state.algorithmList)\r\n      return;\r\n    }\r\n    this.setState({\r\n      selectedAlgoId: selectedAlgo.id\r\n    })\r\n    console.log(\"Algorithm selected\", selectedAlgo.id);\r\n  }\r\n\r\n  handleStartAnalyze = () => {\r\n    if (this.state.selectedAlgoId === \"\") {\r\n      message.warn(\"Please select an algorithm!\");\r\n      return;\r\n    }\r\n    let requestBody = {\r\n      upload_id: this.props.targetFileId,\r\n      algo_id: this.state.selectedAlgoId\r\n    }\r\n    APIUtils.post('/api/data/analysis/start', JSON.stringify(requestBody))\r\n    .then(response => {\r\n      if (response.code !== 'OK') {\r\n        APIUtils.handleError(response.code, this.props.language);\r\n      }\r\n      this.props.algorithmControl(false);\r\n    })\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.props.algorithmControl(false);\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AlgorithmController\">\r\n        <Modal\r\n          title={this.enzh(\"Select Algorithm\", \"算法选择\")}\r\n          visible={true}\r\n          centered\r\n          onCancel={this.handleCancel}\r\n          footer={[\r\n            <Button key=\"back\" onClick={this.handleCancel}>\r\n              {this.enzh(\"Cancel\", \"取消\")}\r\n            </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={this.handleStartAnalyze}>\r\n              {this.enzh(\"Start Analyzing\", \"开始分析\")}\r\n            </Button>,\r\n          ]}\r\n        >\r\n          <Select\r\n            placeholder={this.enzh(\"Please select an Algorithm\", \"请选择算法\")}\r\n            style={{ margin: \"auto\" }}\r\n            onChange={this.handleSelectAlgo}\r\n          >\r\n            {this.state.algorithmList.map((algo =>\r\n              (<Option key={algo.algo_name} value={algo.algo_name}>{algo.algo_name}</Option>)))}\r\n          </Select>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlgorithmController;","import React from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n  Button,\r\n  Table,\r\n  Tag,\r\n  Input,\r\n  Popover,\r\n  Dropdown,\r\n  Menu,\r\n  DatePicker,\r\n  Tooltip\r\n} from 'antd';\r\n\r\nimport {\r\n  CloudUploadOutlined,\r\n  UnorderedListOutlined,\r\n  FilterOutlined,\r\n  ReloadOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/dashboardTable.css';\r\n\r\nimport AlgorithmController from 'components/AlgorithmController';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Search } = Input;\r\nconst { RangePicker } = DatePicker;\r\n\r\ntype PropsType = {\r\n  tab: string;\r\n  uploadInProgress: boolean;\r\n  drawerControl: (on: boolean) => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  fileList: any[];\r\n  filteredFileList: any[];\r\n  algoList: any[];\r\n  algorithmControl: boolean;\r\n  refresh: boolean;\r\n}\r\n\r\ntype TimeRangeType = [moment.Moment, moment.Moment]\r\n\r\nclass DashboardTable extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n  targetFileId: string;\r\n  timeRange: TimeRangeType;\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      fileList: [],\r\n      filteredFileList: [],\r\n      algoList: [],\r\n      algorithmControl: false,\r\n      refresh: false\r\n    }\r\n\r\n    this.targetFileId = \"\";\r\n    this.timeRange = [moment(0), moment(0)];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getFileList();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: StateType) {\r\n    if (this.props.tab !== prevProps.tab ||\r\n      this.props.uploadInProgress !== prevProps.uploadInProgress ||\r\n      this.state.refresh !== prevState.refresh ||\r\n      this.state.algorithmControl !== prevState.algorithmControl\r\n    ) {\r\n      this.getFileList();\r\n    }\r\n  }\r\n\r\n  algorithmControl = (on: boolean) => this.setState({ algorithmControl: on });\r\n\r\n  getFileList = () => {\r\n    let requestParams = {\r\n      product: APIUtils.ProductsInfo[this.props.tab].productName\r\n    }\r\n\r\n    APIUtils.get('/api/data/upload/list', requestParams)\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          // assign a unique key for each row of the table\r\n          let uploadList: any[] = (response as APIUtils.SuccessResponseDataType).data.items;\r\n          uploadList.forEach((uploadItem: any) => {\r\n            uploadItem.key = uploadItem.id;\r\n          });\r\n          this.setState({\r\n            fileList: uploadList,\r\n            filteredFileList: uploadList\r\n          })\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      })\r\n  }\r\n\r\n  refresh = () => {\r\n    this.setState((state, props) => ({\r\n      refresh: !state.refresh\r\n    }));\r\n  }\r\n\r\n  onSearch = (value: string) => {\r\n    if (value === \"\") {\r\n      this.setState({\r\n        filteredFileList: this.state.fileList\r\n      })\r\n    }\r\n    this.setState(state => ({\r\n      filteredFileList: state.filteredFileList.filter(record => record.upload_name.includes(value))\r\n    }));\r\n  }\r\n\r\n  handleSelectFile = (e: any, fileName: string) => {\r\n    e.preventDefault();\r\n    let selectedFile = this.state.fileList.find(file => file.file_name === fileName);\r\n    if (selectedFile === undefined) {\r\n      console.warn(\"Cannot find \", fileName, \"in\", this.state.fileList);\r\n      return;\r\n    }\r\n    this.targetFileId = selectedFile.id;\r\n    console.log(\"File selected\", this.targetFileId)\r\n    this.setState({\r\n      algorithmControl: true\r\n    })\r\n  }\r\n\r\n  selectTimeRange = (value: any) => {\r\n    this.timeRange = value;\r\n  }\r\n\r\n  applyTimeRange = () => {\r\n    console.log(\"Time range selected: \", this.timeRange);\r\n    this.setState(state => ({\r\n      filteredFileList: state.filteredFileList.filter(record =>\r\n        moment.unix(record.created_at).isBetween(this.timeRange[0], this.timeRange[1]))\r\n    }));\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n\r\n    let bulkActionMenu = (\r\n      <Menu>\r\n        <Menu.Item key=\"bulk-choose-algo\">{this.enzh(\"Choose Algorithm\", \"选择算法\")}</Menu.Item>\r\n        <Menu.Item key=\"bulk-view-result\">{this.enzh(\"View Result\", \"查看结果\")}</Menu.Item>\r\n      </Menu>\r\n    );\r\n\r\n    let filterPopup = (\r\n      <div>\r\n        <RangePicker\r\n          showTime={{ format: 'HH:mm' }}\r\n          format=\"YYYY-MM-DD HH:mm\"\r\n          ranges={{\r\n            'Today': [moment(), moment()],\r\n            'This Month': [moment().startOf('month'), moment()],\r\n            'This Year': [moment().startOf('year'), moment()]\r\n          }}\r\n          allowClear={true}\r\n          disabledDate={(current: moment.Moment) => current > moment().endOf('day')}\r\n          onChange={this.selectTimeRange}\r\n          onOk={this.applyTimeRange}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    let formColumns = [\r\n      {\r\n        title: this.enzh('File Name', '数据名'),\r\n        dataIndex: 'upload_name',\r\n        key: 'file_name',\r\n      },\r\n      {\r\n        title: this.enzh('File Key', '数据编码'),\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n      },\r\n      {\r\n        title: this.enzh('Upload Time', '上传时间'),\r\n        dataIndex: 'created_at',\r\n        key: 'created_at',\r\n        render: (text: number) => {\r\n          let current = new Date(text * 1000);\r\n          return <div>{current.toString().split(' ').splice(0, 6).join(' ')}</div>\r\n        }\r\n      },\r\n      {\r\n        title: this.enzh('Status', '状态'),\r\n        dataIndex: 'state',\r\n        key: 'state',\r\n        render: (text: string) => {\r\n          switch (text) {\r\n            case 'uploaded-raw':\r\n              return (\r\n                <Tag color=\"cyan\">\r\n                  {this.enzh(\"Uploaded\", \"上传完成\")}\r\n                </Tag>\r\n              );\r\n            case 'uploading':\r\n              return (\r\n                <Tooltip title={\r\n                  this.enzh(\r\n                    \"To continue an unfinished upload, upload it again\",\r\n                    \"如果您想要继续未完成的上传，请再次上传该文件\"\r\n                  )\r\n                }>\r\n                  <Tag color=\"orange\">\r\n                    {this.enzh(\"Upload Unfinished\", \"上传未完成\")}\r\n                  </Tag>\r\n                </Tooltip>\r\n              );\r\n            default:\r\n              return (\r\n                <Tag color=\"blue\">\r\n                  {this.enzh(\"Complete\", \"分析完成\")}\r\n                </Tag>\r\n              );\r\n          }\r\n        },\r\n      },\r\n      {\r\n        title: this.enzh('Action', '可选操作'),\r\n        dataIndex: '',\r\n        key: 'x',\r\n        render: (text: any, record: any) => {\r\n          if (record.state === 'uploaded-raw') {\r\n            return (<a href=\"/#\" onClick={e => { this.handleSelectFile(e, record.file_name) }}>{this.enzh(\"Select Algorithm\", \"选择算法\")}</a>);\r\n          } else if (record.state === 'uploading') {\r\n            return (<span style={{ color: \"#00000040\" }}>-</span>);\r\n          } else {\r\n            return (<a href=\"/#\" onClick={e => { e.preventDefault() }}>{this.enzh(\"View Result\", \"查看结果\")}</a>);\r\n          }\r\n        },\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <div className=\"DashboardTable\">\r\n        <Button\r\n          className=\"table-button\"\r\n          type=\"primary\"\r\n          shape=\"round\"\r\n          icon={<CloudUploadOutlined />}\r\n          onClick={() => this.props.drawerControl(true)}\r\n        >\r\n          {\r\n            this.state.fileList[0]?.state !== 'uploading' ?\r\n              this.enzh(\"New Upload\", \"上传数据\") :\r\n              this.enzh(\"Resume / New Upload\", \"新建/继续上传\")\r\n          }\r\n        </Button>\r\n\r\n        <Dropdown overlay={bulkActionMenu} trigger={['click']}>\r\n          <Button\r\n            className=\"table-button\"\r\n            shape=\"round\"\r\n            icon={<UnorderedListOutlined />}\r\n          >\r\n            {this.enzh(\"Bulk Action\", \"多选操作\")}\r\n          </Button>\r\n        </Dropdown>\r\n\r\n        <Popover\r\n          placement=\"bottomLeft\"\r\n          content={filterPopup}\r\n          trigger=\"click\"\r\n        >\r\n          <Button\r\n            className=\"table-button\"\r\n            shape=\"round\"\r\n            icon={<FilterOutlined />}\r\n          >\r\n            {this.enzh(\"Filter\", \"筛选\")}\r\n          </Button>\r\n        </Popover>\r\n\r\n        <Search\r\n          key={this.state.refresh.toString()}\r\n          onSearch={this.onSearch}\r\n          size=\"small\"\r\n          style={{\r\n            width: 200,\r\n            padding: \"5px\",\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          className=\"table-button refresh\"\r\n          shape=\"round\"\r\n          type=\"link\"\r\n          icon={<ReloadOutlined />}\r\n          onClick={this.refresh}\r\n        >\r\n          {this.enzh(\"Refresh / Clear Filter\", \"重置\")}\r\n        </Button>\r\n\r\n        <Table\r\n          size=\"middle\"\r\n          rowSelection={{}}\r\n          pagination={{ pageSize: 7 }}\r\n          columns={formColumns}\r\n          dataSource={this.state.filteredFileList}\r\n        />\r\n        { this.state.algorithmControl ?\r\n          <AlgorithmController\r\n            targetFileId={this.targetFileId}\r\n            algorithmControl={this.algorithmControl}\r\n            language={this.props.language}\r\n          /> : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardTable;\r\n","import React from 'react';\r\nimport {\r\n  PageHeader,\r\n  Button,\r\n  Divider,\r\n  Descriptions,\r\n  Tag,\r\n  Badge,\r\n} from 'antd';\r\nimport {\r\n  ExportOutlined,\r\n  BellOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/dashboardMain.css';\r\n\r\nimport DashboardCharts from 'components/DashboardCharts';\r\nimport DashboardTable from 'components/DashboardTable';\r\n\r\ntype PropsType = {\r\n  tab: string;\r\n  userInfo: any;\r\n  uploadInProgress: boolean;\r\n  drawerControl: (on: boolean) => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass DashboardMain extends React.Component<PropsType> {\r\n  \r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  zhtab = (english: string): string => {\r\n    switch (english) {\r\n      case \"EV Management\":\r\n        return \"电动汽车分析平台\";\r\n      case \"ESS Management\":\r\n        return \"储能系统分析平台\";\r\n      case \"R&D Management\":\r\n        return \"电池研发测试分析平台\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  } \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"DashboardMain\">\r\n        <PageHeader\r\n          ghost={false}\r\n          title={this.enzh(this.props.tab, this.zhtab(this.props.tab))}\r\n          tags={<Tag color=\"orange\">Admin</Tag>}\r\n          subTitle={\r\n            this.enzh(`Manage ${this.props.tab.split(' ')[0]} upload items`,\r\n              `管理${this.zhtab(this.props.tab).slice(0, this.zhtab(this.props.tab).length - 2)}数据`)\r\n          }\r\n          extra={[\r\n            <Button\r\n              key=\"upload-button\"\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              icon={<ExportOutlined />}\r\n            >\r\n              {this.enzh(\"Export\", \"下载结果\")}\r\n            </Button>,\r\n            <Badge dot\r\n              key=\"notification-badge\">\r\n              <Button\r\n                key=\"notification-button\"\r\n                shape=\"circle\"\r\n                icon={<BellOutlined />}\r\n              />\r\n            </Badge>\r\n          ]}\r\n          style={{\r\n            padding: '0px 5px 15px'\r\n          }}\r\n        >\r\n          <Descriptions size=\"small\" column={3} style={{ paddingTop: \"3px\" }}>\r\n            <Descriptions.Item label={this.enzh(\"Owner\", \"用户\")}>\r\n              {this.props.userInfo.name}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label={this.enzh(\"Affiliation\", \"编号\")}>\r\n              {this.props.userInfo.id}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label={this.enzh(\"Remarks\", \"备注\")}>\r\n              {this.props.userInfo.remark}\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n        </PageHeader>\r\n        <DashboardCharts />\r\n        <Divider orientation=\"left\">{this.enzh(\"Manage Uploads\", \"项目管理\")}</Divider>\r\n        <DashboardTable\r\n          tab={this.props.tab}\r\n          uploadInProgress={this.props.uploadInProgress}\r\n          drawerControl={this.props.drawerControl}\r\n          language={this.props.language}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardMain;\r\n","import React from 'react';\r\nimport AWS from 'aws-sdk';\r\nimport SparkMD5 from 'spark-md5';\r\nimport {\r\n  Modal,\r\n  // Steps,\r\n  Progress\r\n} from 'antd';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\n// const { Step } = Steps;\r\n\r\ntype PropsType = {\r\n  file: File;\r\n  uploadName: string;\r\n  product: string;\r\n  uploadControl: (on: boolean) => void;\r\n  resumeUpload: boolean;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  modalVisible: boolean;\r\n  step: number;\r\n  progress: number;\r\n  err: boolean;\r\n}\r\n\r\nclass UploadController extends React.Component<PropsType, StateType> {\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      modalVisible: false,\r\n      step: 0,\r\n      progress: 0,\r\n      err: false\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let file = this.props.file;\r\n    console.log(\"File recieved\", file)\r\n\r\n    this.setState({\r\n      modalVisible: true\r\n    });\r\n\r\n    this.getFileMD5(file).then(fileMD5 => {\r\n      let fileKey = fileMD5;\r\n      console.log(\"MD5 hash complete\", fileMD5)\r\n      let file_info = {\r\n        file_key: fileKey,\r\n        file_name: file.name,\r\n        file_size: file.size,\r\n        upload_name: this.props.uploadName,\r\n        product: this.props.product\r\n      }\r\n\r\n      APIUtils.post('/api/data/multipart_upload/init', JSON.stringify(file_info))\r\n        .then(response => {\r\n          if (response.code !== 'OK') {\r\n            this.setState({\r\n              err: true\r\n            })\r\n            APIUtils.handleError(response.code, this.props.language);\r\n          } \r\n          else {\r\n            let awsMetaData = (response as APIUtils.SuccessResponseDataType).data;\r\n            console.log(\"AWS metadata acquired\", awsMetaData)\r\n\r\n            let s3Client = this.getS3Client(awsMetaData.authorization);\r\n\r\n            this.setState({\r\n              step: 1,\r\n              progress: 0\r\n            });\r\n\r\n            try {\r\n              this.uploadFile(s3Client, awsMetaData, file, fileMD5)\r\n            } catch (err) {\r\n              this.setState({ err: true });\r\n              console.warn(err);\r\n            }\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  getFileMD5 = async (file: File) => {\r\n    try {\r\n      return await this.md5Hash(file);\r\n    } catch (err) {\r\n      this.setState({ err: true });\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  md5Hash = (file: File) => {\r\n    return new Promise((resolve, reject) => {\r\n      var blobSlice = File.prototype.slice,\r\n        chunkSize = 5 * 1024 * 1024,\r\n        chunks = Math.ceil(file.size / chunkSize),\r\n        currentChunk = 0,\r\n        spark = new SparkMD5.ArrayBuffer(),\r\n        fileReader = new FileReader();\r\n\r\n      fileReader.onload = (e: any) => {\r\n        spark.append(e.target.result);\r\n        currentChunk++;\r\n\r\n        this.setState({\r\n          progress: parseFloat((currentChunk / chunks * 100).toFixed(2))\r\n        })\r\n\r\n        if (currentChunk < chunks) {\r\n          loadNext();\r\n        } else {\r\n          console.log('finished loading');\r\n          resolve(spark.end());\r\n        }\r\n      };\r\n\r\n      fileReader.onerror = () => {\r\n        this.setState({ err: true });\r\n        console.warn('oops, something went wrong.');\r\n      };\r\n\r\n      fileReader.onabort = () => {\r\n        console.warn('abort.');\r\n      };\r\n\r\n      function loadNext() {\r\n        let start = currentChunk * chunkSize,\r\n          end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\r\n        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\r\n      }\r\n      loadNext();\r\n    })\r\n  }\r\n\r\n  getS3Client = (cognitoIdentityCredentials: any) => {\r\n    // var identity_provider = cognitoIdentityCredentials.identity_provider;\r\n    let credentials = new AWS.CognitoIdentityCredentials({\r\n      IdentityPoolId: cognitoIdentityCredentials.identity_pool_id,\r\n      IdentityId: cognitoIdentityCredentials.identity_id,\r\n      Logins: {\r\n        // identity_provider: cognitoIdentityCredentials.token\r\n        'cognito-identity.amazonaws.com': cognitoIdentityCredentials.token\r\n      },\r\n    })\r\n\r\n    AWS.config.update({\r\n      credentials: credentials,\r\n      region: cognitoIdentityCredentials.region,\r\n    })\r\n\r\n    let s3 = new AWS.S3({\r\n      apiVersion: '2006-03-01',\r\n      maxRetries: 3,\r\n      httpOptions: {\r\n        connectTimeout: 1000 * 10,\r\n        timeout: 1000 * 60 * 10,\r\n      }\r\n    });\r\n\r\n    return s3;\r\n  }\r\n\r\n  uploadFile = async (s3Client: any, awsMetaData: any, file: any, fileKey: any) => {\r\n    let uploadConfig = {\r\n      Key: fileKey,\r\n      Bucket: awsMetaData.bucket,\r\n      UploadId: awsMetaData.remote_upload_id\r\n    }\r\n\r\n    console.log(\"Upload configuration generated\", uploadConfig);\r\n\r\n    let fullPartInfo = await this.uploadPart(s3Client, uploadConfig, awsMetaData.id, file, awsMetaData.parts);\r\n    console.log(\"Full part infomation generated\", fullPartInfo);\r\n    let params = Object.assign({ 'MultipartUpload': fullPartInfo }, uploadConfig);\r\n    console.log(\"Params genterated\", params);\r\n    let result = await this.asyncS3Fetch(s3Client, 'completeMultipartUpload', params);\r\n    console.log(\"Result params returned\", result);\r\n    this.completeUpload(awsMetaData.id, fileKey, result['ETag'], result['Location']);\r\n  }\r\n\r\n  uploadPart = async (s3: any, config: any, fileId: any, file: any, parts: any) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      var blobSlice = File.prototype.slice,\r\n        chunkSize = 5 * 1024 * 1024,\r\n        chunks = Math.ceil(file.size / chunkSize),\r\n        currentChunk = parts.length > 0 ? parts[parts.length - 1]['part_number'] : 0,\r\n        fileReader = new FileReader(),\r\n        partInfo: any = {\r\n          'Parts': []\r\n        };\r\n\r\n      for (var i of parts) {\r\n        partInfo['Parts'].push({\r\n          PartNumber: i['part_number'],\r\n          ETag: i['etag']\r\n        })\r\n      }\r\n\r\n      fileReader.onload = async (e: any) => {\r\n\r\n        if (currentChunk < chunks) {\r\n          var params = Object.assign({\r\n            Body: new Uint8Array(e.target.result),\r\n            PartNumber: currentChunk + 1,\r\n          }, config);\r\n          let response = await this.asyncS3Fetch(s3, 'uploadPart', params);\r\n          partInfo['Parts'].push({\r\n            PartNumber: params['PartNumber'],\r\n            ETag: response.ETag\r\n          })\r\n\r\n          this.recordPart(fileId, params['PartNumber'], response.ETag, params['Body'].length);\r\n\r\n          currentChunk++;\r\n          this.setState({\r\n            progress: parseFloat((currentChunk / chunks * 100).toFixed(2))\r\n          });\r\n\r\n          loadNext();\r\n        } else {\r\n          console.log('finished loading');\r\n          resolve(partInfo)\r\n        }\r\n      };\r\n\r\n      fileReader.onerror = () => {\r\n        this.setState({ err: true });\r\n        console.warn('oops, something went wrong.');\r\n      };\r\n\r\n      fileReader.onabort = () => {\r\n        console.warn('abort.');\r\n      };\r\n\r\n      function loadNext() {\r\n        var start = currentChunk * chunkSize,\r\n          end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\r\n\r\n        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\r\n      }\r\n      loadNext();\r\n    })\r\n  }\r\n\r\n  recordPart = (fileId: string, partNumber: number, partETag: string, partSize: number) => {\r\n    var requestData = {\r\n      upload_id: fileId,\r\n      part_number: partNumber,\r\n      part_etag: partETag,\r\n      part_size: partSize\r\n    }\r\n\r\n    APIUtils.post('/api/data/multipart_upload/add_part', JSON.stringify(requestData))\r\n      .then(response => {\r\n        if (response.code !== 'OK') {\r\n          this.setState({\r\n            err: true\r\n          })\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      })\r\n  }\r\n\r\n  completeUpload = (uploadId: string, fileKey: string, etag: string, location: string) => {\r\n    let requestData = {\r\n      upload_id: uploadId,\r\n      file_key: fileKey,\r\n      etag: etag,\r\n      location: location\r\n    }\r\n\r\n    APIUtils.post('/api/data/multipart_upload/complete', JSON.stringify(requestData))\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.setState({\r\n            step: 2\r\n          });\r\n        } else {\r\n          this.setState({\r\n            err: true\r\n          })\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      })\r\n  }\r\n\r\n  asyncS3Fetch = (s3: any, functionName: string, params: any): any => {\r\n    return new Promise((resolve, reject) => {\r\n      s3[functionName](params, (err: any, data: any) => {\r\n        if (err) {\r\n          this.setState({ err: true });\r\n          console.log('error: ', err);\r\n          resolve(err);\r\n        }\r\n        else {\r\n          console.log('data: ', data);\r\n          resolve(data);\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      modalVisible: false\r\n    });\r\n    if (this.state.step >= 2) {\r\n      this.props.uploadControl(false);\r\n    }\r\n  }\r\n\r\n  // stepDescription = (currentStep: number) => {\r\n  //   if (this.state.step < currentStep) {\r\n  //     return this.enzh(\"Waiting\", \"等待中...\");\r\n  //   } else if (this.state.step > currentStep) {\r\n  //     return this.enzh(\"Finished\", \"已完成\");\r\n  //   } else {\r\n  //     return this.enzh(\"Current Progress: \", \"当前进度：\") + this.state.progress + \"%\";\r\n  //   }\r\n  // }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n\r\n    let progressDescription = () => {\r\n      if (this.state.step === 0) {\r\n        return (<p>{this.enzh(`Processing File... ${this.state.progress}%` , `正在读取文件... ${this.state.progress}%`)}</p>);\r\n      }\r\n      if (this.state.step === 1) {\r\n        return (<p>{this.enzh(`Uploading File... ${this.state.progress}%`, `正在上传文件... ${this.state.progress}%`)}</p>);\r\n      }\r\n      if (this.state.step === 2) {\r\n        return (<p>{this.enzh(\"Upload Finished.\", \"上传完成。\")}</p>);\r\n      }\r\n      return (<p>{\"\"}</p>);\r\n    }\r\n\r\n    let progressSubDescription = () => {\r\n      if (this.state.step === 1 && this.state.progress === 0) {\r\n        if (this.props.resumeUpload) {\r\n          return (<p>{this.enzh(\"Retrieving previous progress...\", \"正在获取上次上传的进度...\")}</p>);\r\n        } else {\r\n          return (<p>{this.enzh(\"Establishing connection with the server...\", \"正在建立与服务器的连接...\")}</p>);\r\n        }\r\n      }\r\n      if (this.state.step === 2) {\r\n        return (<p>{this.enzh(\"You may now leave this page.\", \"您现在可以安全地离开此页。\")}</p>);\r\n      }\r\n      return (<p>{\"\"}</p>);\r\n    }\r\n\r\n    return (\r\n      <div className=\"UploadController\">\r\n        <Modal\r\n          visible={this.state.modalVisible}\r\n          centered\r\n          title={this.enzh(\"Upload Data\", \"上传数据文件\")}\r\n          footer={null}\r\n          closable={this.state.step === 2 || this.state.err}\r\n          maskClosable={false}\r\n          onCancel={this.handleClose}\r\n        >\r\n          {progressDescription()}\r\n          <Progress\r\n            status={!this.state.err ? (this.state.progress === 100 ? \"success\" : \"active\") : \"exception\"}\r\n            percent={this.state.progress}\r\n            strokeColor=\"#52c41a\"\r\n            showInfo={false}\r\n          />\r\n          {progressSubDescription()}\r\n\r\n          {/* <Steps\r\n            direction=\"vertical\"\r\n            current={this.state.step}\r\n            percent={this.state.progress}\r\n            status={this.state.err ? \"error\" : \"process\"}\r\n          >\r\n            <Step\r\n              title={this.enzh(\"Processing File\", \"处理文件\")}\r\n              description={this.stepDescription(0)}\r\n            />\r\n            <Step\r\n              title={this.enzh(\"Uploading File\", \"上传文件\")}\r\n              description={this.stepDescription(1)}\r\n            />\r\n            <Step\r\n              title={this.enzh(\"Upload Finished\", \"上传完成\")}\r\n              description={this.state.step >= 2 ? this.enzh(\"You may now close the window.\", \"您可以关闭此对话框\") : this.enzh(\"Waiting\", \"等待中...\")}\r\n            />\r\n          </Steps> */}\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadController;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n  Drawer,\r\n  DatePicker,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Select,\r\n  Switch,\r\n  Upload,\r\n  Modal\r\n} from \"antd\";\r\nimport { FormInstance } from 'antd/lib/form';\r\nimport {\r\n  InboxOutlined,\r\n  CloudUploadOutlined,\r\n  ExclamationCircleOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nimport 'styles/uploadSession.css';\r\n\r\nimport UploadController from \"components/UploadController\";\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nconst { confirm } = Modal;\r\n\r\ntype PropsType = {\r\n  drawerVisible: boolean;\r\n  uploadInProgress: boolean;\r\n  drawerControl: (on: boolean) => void;\r\n  uploadControl: (on: boolean) => void;\r\n  tab: string;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  fileData: any;\r\n  uploadName: string;\r\n  serviceType: string;\r\n  isAccident: boolean;\r\n  unfinishedUpload: boolean;\r\n  unfinishedUploadName: string;\r\n}\r\n\r\nclass UploadSession extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n  formItemLayout: any;\r\n  formRef: React.RefObject<FormInstance<any>>;\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      fileData: null,\r\n      uploadName: \"\",\r\n      serviceType: \"ev\",\r\n      isAccident: false,\r\n      unfinishedUpload: false,\r\n      unfinishedUploadName: \"\"\r\n    };\r\n\r\n    this.formItemLayout = {\r\n      labelCol: { span: 6 },\r\n      wrapperCol: { span: 14 }\r\n    };\r\n\r\n    this.formRef = React.createRef<FormInstance>();\r\n  }\r\n\r\n  componentDidMount() {\r\n    APIUtils.get('/api/data/upload/list', { product: this.state.serviceType })\r\n    .then(response => {\r\n      if (response.code === 'OK') {\r\n        let uploadList: any[] = (response as APIUtils.SuccessResponseDataType).data.items;\r\n        if (uploadList.length !== 0 && uploadList[0].state === 'uploading') {\r\n          this.setState({\r\n            unfinishedUpload: true,\r\n            unfinishedUploadName: (uploadList[0].upload_name)\r\n          });\r\n\r\n          confirm({\r\n            title: this.enzh(\r\n              `Unfinished upload detected: ${this.state.unfinishedUploadName}`,\r\n              `检测到尚未完成的上传: ${this.state.unfinishedUploadName}`\r\n              ),\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: this.enzh(\r\n              \"If you wish to resume the unfinished upload, select the same file and upload again. \",\r\n              \"如果您想要继续未完成的上传，请在您的设备上选择该文件并再次点击上传。\"\r\n              ),\r\n            onOk: () => {\r\n              this.formRef.current?.setFieldsValue({\r\n                uploadName: this.state.unfinishedUploadName\r\n              });\r\n            },\r\n            onCancel: () => {\r\n              this.setState({\r\n                unfinishedUpload: false\r\n              });\r\n            },\r\n            okText: this.enzh(\"OK\", \"确定\"),\r\n            cancelText: this.enzh(\"Cancel\", \"取消\"),\r\n            width: 500\r\n          });\r\n        }\r\n      } else {\r\n        APIUtils.handleError(response.code, this.props.language)\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    if (this.props.tab !== prevProps.tab) {\r\n      switch(this.props.tab) {\r\n        case \"EV Management\":\r\n          this.setState({ serviceType: \"ev\" });\r\n          break;\r\n        case \"ESS Management\":\r\n          this.setState({ serviceType: \"ess\" });\r\n          break;\r\n        case \"R&D Management\":\r\n          this.setState({ serviceType: \"rd\" });\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  inputUploadName = (e: any) => this.setState({ uploadName: e.target.value });\r\n  selectService = (value: string) => this.setState({ serviceType: value });\r\n  setAccident = (checked: boolean) => this.setState({ isAccident: checked });\r\n  onSubmit = (values: any) => {\r\n    console.log(\"Recieved values from form:\", values);\r\n    this.setState({\r\n      uploadName: values.uploadName,\r\n      serviceType: values.service\r\n    })\r\n    this.props.uploadControl(true);\r\n    this.props.drawerControl(false);\r\n  }\r\n\r\n  loadFile = (e: any) => {\r\n    this.setState({\r\n      fileData: e.file\r\n    });\r\n\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  \r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n\r\n    let uploadTagOptions = [];\r\n    for (let i = 1; i <= 3; i++) {\r\n      let value = this.state.serviceType.split(' ')[0] + i;\r\n      uploadTagOptions.push(<Option key={value} value={value}>{value}</Option>)\r\n    }\r\n\r\n    return (\r\n      <div className=\"UploadSession\">\r\n        <div className=\"upload-drawer\">\r\n          <Drawer\r\n            forceRender={true}\r\n            title={this.enzh(\"Start New Upload Session\", \"上传数据\")}\r\n            width={720}\r\n            visible={this.props.drawerVisible}\r\n            onClose={() => this.props.drawerControl(false)}\r\n            destroyOnClose={true}\r\n            bodyStyle={{ paddingBottom: 80 }}\r\n            footer={\r\n              <div\r\n                style={{\r\n                  textAlign: 'left',\r\n                }}\r\n              >\r\n                <Button\r\n                  type=\"primary\"\r\n                  icon={<CloudUploadOutlined />}\r\n                  style={{ marginRight: 8 }}\r\n                  onClick={() => {\r\n                    this.formRef.current?.validateFields()\r\n                    .then(this.onSubmit)\r\n                    .catch(errorInfo => {\r\n                      console.warn(\"Form validation error: \", errorInfo);\r\n                    })\r\n                  }}\r\n                  disabled={!this.state.fileData}\r\n                >\r\n                  {this.enzh(\"Start Upload\", \"开始上传\")}\r\n                </Button>\r\n                <Button onClick={() => this.props.drawerControl(false)}>\r\n                  {this.enzh(\"Cancel\", \"取消\")}\r\n                </Button>\r\n              </div>\r\n            }\r\n          >\r\n\r\n            <div className=\"upload-form\">\r\n              <Form name=\"upload-form\"\r\n                ref={this.formRef}\r\n                {...this.formItemLayout}\r\n              >\r\n\r\n                <Form.Item\r\n                  label={this.enzh(\"Upload Name\", \"数据名\")}\r\n                  name=\"uploadName\"\r\n                  rules={[\r\n                    { required: true, message: this.enzh(\"An upload name is required to continue\", \"请输入数据名\") }\r\n                  ]}\r\n                >\r\n                  <Input onChange={this.inputUploadName} placeholder={this.enzh(\"Custom name for this dataset.\", \"请自定义数据名\")} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Upload Remarks\", \"上传备注\")} name=\"note\">\r\n                  <TextArea rows={3} placeholder={this.enzh(\"Description and remarks of this dataset (Optional)\", \"请提供上传备注（可选）\")} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label={this.enzh(\"Select Service\", \"选择数据类型\")}\r\n                  initialValue={APIUtils.ProductsInfo[this.props.tab].productName}\r\n                  name=\"service\"\r\n                >\r\n                  <Select onChange={this.selectService}>\r\n                    <Option value=\"ev\">{this.enzh(\"EV Operation\", \"电动汽车运行数据\")}</Option>\r\n                    <Option value=\"ess\">{this.enzh(\"ESS Operation\", \"储能系统分析平台\")}</Option>\r\n                    <Option value=\"rd\">{this.enzh(\"Cell Long-term Performance Testing\", \"电芯循环测试数据\")}</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Upload ID Tag\", \"上传标签\")} name=\"idtag\">\r\n                  <Select mode=\"tags\" style={{ width: '100%' }} placeholder={this.enzh(\"Upload Tag (Optional)\", \"请为上传数据提供标签（可选）\")}>\r\n                    {uploadTagOptions}\r\n                  </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Accident Data\", \"添加事故数据\")} name=\"isAccident\" valuePropName=\"checked\">\r\n                  <Switch checkedChildren=\"Yes\" unCheckedChildren=\"No\" onChange={this.setAccident} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Accident Date\", \"事故日期\")} name=\"accidentDate\">\r\n                  <DatePicker\r\n                    disabled={!this.state.isAccident}\r\n                    placeholder={this.enzh(\"Select Date\", \"选择日期\")}\r\n                    disabledDate={current => current.isAfter(moment())} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Accident Description\", \"事故描述\")} name=\"accidentNote\">\r\n                  <TextArea\r\n                    rows={3}\r\n                    style={{ width: '100%' }}\r\n                    disabled={!this.state.isAccident}\r\n                    placeholder={this.enzh(\"Relevant infomations about this accident. (Optional)\", \"请提供相关信息（可选）\")} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label={this.enzh(\"Upload File\", \"上传数据\")}\r\n                  rules={[\r\n                    { required: true, message: this.enzh(\"Please upload dataset to continue. \", \"请添加数据文件\") }\r\n                  ]}\r\n                >\r\n                  <Form.Item\r\n                    name=\"dragger\"\r\n                    valuePropName=\"fileList\"\r\n                    getValueFromEvent={this.loadFile}\r\n                    noStyle\r\n                  >\r\n                    <Upload.Dragger\r\n                      name=\"files\"\r\n                      beforeUpload={(file, fileList) => false}\r\n                    >\r\n                      <p className=\"ant-upload-drag-icon\">\r\n                        <InboxOutlined />\r\n                      </p>\r\n                      <p className=\"ant-upload-text\">\r\n                        {this.enzh(\"Click or drag file to this area to upload\", \"点击或拖拽文件至此区域\")}\r\n                    </p>\r\n                    </Upload.Dragger>\r\n                  </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  wrapperCol={{\r\n                    span: 12,\r\n                    offset: 6\r\n                  }}\r\n                >\r\n                </Form.Item>\r\n              </Form>\r\n            </div>\r\n          </Drawer>\r\n        </div>\r\n\r\n        { this.props.uploadInProgress ?\r\n          <UploadController\r\n            file={this.state.fileData}\r\n            uploadName={this.state.uploadName}\r\n            product={this.state.serviceType}\r\n            uploadControl={this.props.uploadControl}\r\n            resumeUpload={this.state.unfinishedUpload}\r\n            language={this.props.language}\r\n          /> : null\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadSession;\r\n","import React from 'react';\r\n\r\nimport {\r\n  Layout,\r\n  Menu,\r\n  Breadcrumb\r\n} from 'antd';\r\nimport {\r\n  SisternodeOutlined,\r\n  ExperimentOutlined,\r\n  NodeIndexOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/dashboard.css';\r\n\r\nimport DashboardMain from 'components/DashboardMain';\r\nimport UploadSession from 'components/UploadSession';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\n// const { SubMenu } = Menu;\r\nconst { Content, Sider, Footer } = Layout;\r\n\r\ntype PropsType = {\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  userInfo: any;\r\n  tab: string;\r\n  drawerVisible: boolean;\r\n  uploadInProgress: boolean;\r\n}\r\n\r\nclass Dashboard extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      userInfo: {\r\n        name: '-',\r\n        id: '-',\r\n        remark: '-'\r\n      },\r\n      tab: 'EV Management',\r\n      drawerVisible: false,\r\n      uploadInProgress: false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log userInfo into state\r\n   */\r\n  componentDidMount() {\r\n    APIUtils.get('/api/account/user/info')\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.setState({\r\n            userInfo: (response as APIUtils.SuccessResponseDataType).data,\r\n          })\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      })\r\n  }\r\n\r\n  // controller methods\r\n  handleSelect = (event: any) => this.setState({ tab: event.key });\r\n  drawerControl = (on: boolean) => this.setState({ drawerVisible: on });\r\n  uploadControl = (on: boolean) => this.setState({ uploadInProgress: on });\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  zhtab = (english: string): string => {\r\n    switch (english) {\r\n      case \"EV Management\":\r\n        return \"电动汽车分析平台\";\r\n      case \"ESS Management\":\r\n        return \"储能系统分析平台\";\r\n      case \"R&D Management\":\r\n        return \"电池研发测试分析平台\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Dashboard\">\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <Breadcrumb style={{ margin: '16px 0' }}>\r\n            <Breadcrumb.Item>{this.enzh('Home', '主页')}</Breadcrumb.Item>\r\n            <Breadcrumb.Item>{this.enzh(this.state.tab, this.zhtab(this.state.tab))}</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\r\n            <Sider className=\"site-layout-background\" width={220}>\r\n              <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={['EV Management']}\r\n                onSelect={this.handleSelect}\r\n                style={{ height: \"100%\" }}\r\n              >\r\n                <Menu.Item\r\n                  key=\"EV Management\"\r\n                  icon={<SisternodeOutlined />}\r\n                >\r\n                  {this.enzh(\"EV Management\", \"电动汽车分析平台\")}\r\n                </Menu.Item>\r\n\r\n                <Menu.Item\r\n                  key=\"ESS Management\"\r\n                  icon={<NodeIndexOutlined />}\r\n                >\r\n                  {this.enzh(\"ESS Management\", \"储能系统分析平台\")}\r\n                </Menu.Item>\r\n\r\n                <Menu.Item\r\n                  key=\"R&amp;D Management\"\r\n                  icon={<ExperimentOutlined />}\r\n                >\r\n                  {this.enzh(\"R&D Management\", \"电池研发测试分析平台\")}\r\n                </Menu.Item>\r\n              </Menu>\r\n            </Sider>\r\n\r\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n              <DashboardMain\r\n                tab={this.state.tab}\r\n                userInfo={this.state.userInfo}\r\n                uploadInProgress={this.state.uploadInProgress}\r\n                drawerControl={this.drawerControl}\r\n                language={this.props.language}\r\n              />\r\n            </Content>\r\n\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>{\"Fova Energy ©2020\"}</Footer>\r\n        \r\n        <UploadSession\r\n          drawerVisible={this.state.drawerVisible}\r\n          uploadInProgress={this.state.uploadInProgress}\r\n          drawerControl={this.drawerControl}\r\n          uploadControl={this.uploadControl}\r\n          tab={this.state.tab}\r\n          language={this.props.language}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Select,\r\n  Button,\r\n  Upload,\r\n  Modal\r\n} from 'antd';\r\nimport { FormInstance } from 'antd/lib/form';\r\nimport {\r\n  InboxOutlined,\r\n  ExclamationCircleOutlined,\r\n  CloudUploadOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nimport 'styles/uploadPortal.css';\r\n\r\nimport UploadController from 'components/UploadController';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Option } = Select;\r\nconst { confirm } = Modal;\r\n\r\ntype PropsType = {\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  fileData: File | null;\r\n  uploadName: string;\r\n  serviceType: string;\r\n  uploadInProgress: boolean;\r\n  unfinishedUpload: boolean;\r\n  unfinishedUploadName: string;\r\n}\r\n\r\nclass UploadPortal extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n  formItemLayout: any;\r\n  formRef: React.RefObject<FormInstance<any>>;\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      fileData: null,\r\n      uploadName: \"\",\r\n      serviceType: \"ev\",\r\n      uploadInProgress: false,\r\n      unfinishedUpload: false,\r\n      unfinishedUploadName: \"\"\r\n    };\r\n\r\n    this.formItemLayout = {\r\n      labelCol: { span: 6 },\r\n      wrapperCol: { span: 14 }\r\n    };\r\n\r\n    this.formRef = React.createRef<FormInstance>();\r\n  }\r\n\r\n  componentDidMount() {\r\n    APIUtils.get('/api/data/upload/list', { product: \"ev\" })\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          let uploadList: any[] = (response as APIUtils.SuccessResponseDataType).data.items;\r\n          if (uploadList.length !== 0 && uploadList[0].state === 'uploading') {\r\n            this.setState({\r\n              unfinishedUpload: true,\r\n              unfinishedUploadName: (uploadList[0].upload_name)\r\n            });\r\n\r\n            confirm({\r\n              title: this.enzh(\r\n                `Unfinished upload detected: ${this.state.unfinishedUploadName}`,\r\n                `检测到尚未完成的上传: ${this.state.unfinishedUploadName}`\r\n              ),\r\n              icon: <ExclamationCircleOutlined />,\r\n              content: this.enzh(\r\n                \"If you wish to resume the unfinished upload, select the same file and upload again. \",\r\n                \"如果您想要继续未完成的上传，请在您的设备上选择该文件并再次点击上传。\"\r\n              ),\r\n              onOk: () => {\r\n                this.formRef.current?.setFieldsValue({\r\n                  uploadName: this.state.unfinishedUploadName\r\n                });\r\n              },\r\n              onCancel: () => {\r\n                this.setState({\r\n                  unfinishedUpload: false\r\n                });\r\n              },\r\n              okText: this.enzh(\"OK\", \"确定\"),\r\n              cancelText: this.enzh(\"Cancel\", \"取消\"),\r\n              width: 500\r\n            });\r\n          }\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language)\r\n        }\r\n      })\r\n  }\r\n\r\n  /** Controller Functions */\r\n  uploadControl = (on: boolean) => this.setState({ uploadInProgress: on });\r\n  inputUploadName = (e: any) => this.setState({ uploadName: e.target.value });\r\n  selectService = (value: string) => this.setState({ serviceType: value });\r\n  resumeUploadControl = (on: boolean) => this.setState({ unfinishedUpload: on });\r\n  onSubmit = (values: any) => {\r\n    this.setState({\r\n      uploadName: values.uploadName,\r\n      serviceType: values.service,\r\n      uploadInProgress: true\r\n    });\r\n  };\r\n\r\n  loadFile = (e: any) => {\r\n    this.setState({\r\n      fileData: e.file\r\n    });\r\n\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"UploadPortal\">\r\n        <Form\r\n          ref={this.formRef}\r\n          className=\"upload-portal-form\"\r\n          name=\"upload-portal-form\"\r\n          {...this.formItemLayout}\r\n          onFinish={this.onSubmit}\r\n        >\r\n          <Form.Item\r\n            label={this.enzh(\"Upload Name\", \"数据名\")}\r\n            name=\"uploadName\"\r\n            rules={[\r\n              { required: true, message: this.enzh(\"An upload name is required to continue\", \"请输入数据名\") }\r\n            ]}\r\n          >\r\n            <Input onChange={this.inputUploadName} placeholder={this.enzh(\"Custom name for this dataset.\", \"请自定义数据名\")} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label={this.enzh(\"Select Service\", \"选择数据类型\")}\r\n            initialValue=\"ev\"\r\n            name=\"service\"\r\n          >\r\n            <Select onChange={this.selectService}>\r\n              <Option value=\"ev\">{this.enzh(\"EV Operation\", \"电动汽车运行数据\")}</Option>\r\n              <Option value=\"ess\">{this.enzh(\"ESS Operation\", \"储能系统分析平台\")}</Option>\r\n              <Option value=\"rd\">{this.enzh(\"Cell Long-term Performance Testing\", \"电芯循环测试数据\")}</Option>\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label={this.enzh(\"Upload File\", \"上传数据\")}\r\n            rules={[\r\n              { required: true, message: this.enzh(\"Please upload dataset to continue. \", \"请添加数据文件\") }\r\n            ]}\r\n          >\r\n            <Form.Item\r\n              name=\"dragger\"\r\n              valuePropName=\"fileList\"\r\n              getValueFromEvent={this.loadFile}\r\n              noStyle\r\n            >\r\n              <Upload.Dragger\r\n                name=\"files\"\r\n                beforeUpload={(file, fileList) => false}\r\n              >\r\n                <p className=\"ant-upload-drag-icon\">\r\n                  <InboxOutlined />\r\n                </p>\r\n                <p className=\"ant-upload-text\">\r\n                  {this.enzh(\"Click or drag file to this area to upload\", \"点击或拖拽文件至此区域\")}\r\n                </p>\r\n              </Upload.Dragger>\r\n            </Form.Item>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            wrapperCol={{\r\n              span: 12,\r\n              offset: 6\r\n            }}\r\n          >\r\n            <Button\r\n              className=\"upload-portal-button\"\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              icon={<CloudUploadOutlined />}\r\n              disabled={\r\n                this.state.fileData === null ? true : false\r\n              }\r\n              loading={\r\n                this.state.uploadInProgress ? true : false\r\n              }\r\n            >\r\n              {this.state.uploadInProgress ?\r\n                this.enzh(\"Upload In Progress\", \"上传中\") :\r\n                this.enzh(\"Start Upload\", \"开始上传\")\r\n              }\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n\r\n        { this.state.uploadInProgress ?\r\n          <UploadController\r\n            file={this.state.fileData as File}\r\n            uploadName={this.state.uploadName}\r\n            product={this.state.serviceType}\r\n            uploadControl={this.uploadControl}\r\n            resumeUpload={this.state.unfinishedUpload}\r\n            language={this.props.language}\r\n          /> : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadPortal;\r\n","import React from 'react';\r\n\r\nimport 'styles/logo.css'\r\n\r\nimport logo from 'assets/logo.svg';\r\n\r\nconst Logo = () => (\r\n  <div className=\"Logo\">\r\n    <div className=\"Logo-icon-box\">\r\n    <img src={logo} className=\"Logo-icon\" alt=\"logo\" />\r\n    </div>\r\n    <span className=\"Logo-title\">FOVA Energy</span>\r\n  </div>\r\n)\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  GlobalOutlined,\r\n  LogoutOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/topBar.css';\r\n\r\nimport Logo from 'components/Logo';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Header } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\ntype PropsType = {\r\n  authorized: boolean;\r\n  language: 'en-us' | 'zh-hans';\r\n  handleSignout: () => void;\r\n  switchLanguage: (inputLanguage: PropsType['language']) => void;\r\n}\r\n\r\nclass TopBar extends React.Component<PropsType> {\r\n\r\n  handleSelectLanguage = (event: any) => {\r\n    this.props.switchLanguage(event.key);\r\n  }\r\n\r\n  handleClickLogout = () => {\r\n    APIUtils.post('/api/account/logout')\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.props.handleSignout();\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      });\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n\r\n    const userMenu = (\r\n      <Menu.Item\r\n        key=\"menu-signout\"\r\n        icon={<LogoutOutlined height=\"3em\" />}\r\n        style={{ float: \"right\" }}\r\n        onClick={this.handleClickLogout}\r\n      >\r\n        {this.enzh('Sign Out', '退出登录')}\r\n      </Menu.Item>\r\n    )\r\n\r\n    return (\r\n      <div className=\"TopBar\">\r\n        <Header className=\"header\">\r\n          <Logo />\r\n          <Menu theme=\"dark\" mode=\"horizontal\">\r\n            {this.props.authorized ? userMenu : null}\r\n            <SubMenu\r\n              key=\"menu-language\"\r\n              icon={<GlobalOutlined height=\"3em\" />}\r\n              title={this.enzh('Intl-English', 'Intl-简体中文')}\r\n              style={{ float: \"right\" }}\r\n            >\r\n              <Menu.Item key=\"zh-hans\" onClick={this.handleSelectLanguage}>简体中文</Menu.Item>\r\n              <Menu.Item key=\"en-us\" onClick={this.handleSelectLanguage}>English - US</Menu.Item>\r\n            </SubMenu>\r\n          </Menu>\r\n        </Header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router';\r\nimport { Layout } from 'antd';\r\n\r\nimport 'styles/app.css';\r\n\r\nimport Signin from 'components/Signin';\r\nimport Dashboard from 'components/Dashboard';\r\nimport UploadPortal from 'components/UploadPortal';\r\nimport TopBar from 'components/TopBar';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\ntype StateType = {\r\n  authorized: boolean;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass App extends React.Component<{}, StateType> {\r\n\r\n  state: StateType;\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = {\r\n      authorized: false,\r\n      language: 'en-us' as const\r\n    }\r\n\r\n    this.handleSignout = this.handleSignout.bind(this);\r\n    this.switchLanguage = this.switchLanguage.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Check if a user is logged in\r\n   */\r\n  componentDidMount = () => {\r\n    APIUtils.get('/api/account/user/info')\r\n    .then(responseData => {\r\n      if (responseData.code === 'OK') {\r\n        this.setState({\r\n          authorized: true\r\n        });\r\n      }\r\n    })\r\n    .catch(() => {\r\n      this.setState({\r\n        authorized: false\r\n      })\r\n    })\r\n  }\r\n\r\n  handleSignin = () => { this.setState({ authorized: true }); }\r\n  handleSignout = () => { this.setState({ authorized: false }); }\r\n  switchLanguage = (inputLanguage: StateType[\"language\"]) => { this.setState({ language: inputLanguage });}\r\n\r\n  mountSignin = () => {\r\n    return this.state.authorized ?\r\n      // Upload Portal mount flag\r\n      <Redirect to=\"/home\" /> :\r\n      <Signin\r\n        handleSignin={this.handleSignin}\r\n        language={this.state.language}\r\n      />\r\n  }\r\n\r\n  mountDashboard = () => {\r\n    return this.state.authorized ?\r\n    <Dashboard\r\n      language={this.state.language} /> :\r\n    <Redirect to=\"/signin\" />\r\n  }\r\n\r\n  mountUploadPortal = () => {\r\n    return this.state.authorized ?\r\n    <UploadPortal language={this.state.language} /> :\r\n    <Redirect to=\"/signin\" />\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Layout>\r\n          <TopBar\r\n            authorized={this.state.authorized}\r\n            language={this.state.language}\r\n            handleSignout={this.handleSignout}\r\n            switchLanguage={this.switchLanguage}\r\n          />\r\n        <Switch>\r\n          <Route exact path=\"/\" render={this.mountSignin} />\r\n          <Route path=\"/signin\" render={this.mountSignin} />\r\n          <Route path=\"/home\" render={this.mountDashboard} />\r\n          <Route path=\"/upload-portal\" render={this.mountUploadPortal} />\r\n          <Route render={this.mountSignin} />\r\n        </Switch>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport 'styles/index.css';\r\n\r\nimport App from 'components/App';\r\nimport * as serviceWorker from 'serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n  , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}