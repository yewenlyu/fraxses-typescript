{"version":3,"sources":["assets/logo.svg","components/Logo.tsx","utils/api-utils.tsx","components/TopBar.tsx","components/Signin.tsx","components/DashboardCharts.tsx","components/AlgorithmController.tsx","components/DashboardTable.tsx","components/DashboardMain.tsx","components/UploadController.tsx","components/Upload.tsx","components/Dashboard.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Logo","className","src","logo","alt","parseCookies","key","match","document","cookie","RegExp","result","decodeURIComponent","error","console","warn","queryString","params","Object","keys","map","encodeURIComponent","join","post","url","requestData","a","header","fetch","method","headers","body","then","response","json","responseData","code","log","get","undefined","handleError","errorCode","language","messageLanguageMap","message","ProductsInfo","productId","productName","productDescription","Map","Header","Layout","SubMenu","Menu","TopBar","handleSelectLanguage","event","props","switchLanguage","handleClickLogout","APIUtils","handleSignout","enzh","english","chinese","userMenu","Item","icon","LogoutOutlined","height","style","float","onClick","this","theme","mode","authorized","GlobalOutlined","title","React","Component","Signin","onFinish","values","signinData","name","username","password","JSON","stringify","handleSignin","initialValues","remember","rules","required","prefix","UserOutlined","placeholder","LockOutlined","type","valuePropName","noStyle","href","e","preventDefault","htmlType","DashboardCharts","gutter","span","Option","Select","AlgorithmController","handleSelectAlgo","value","selectedAlgo","state","algorithmList","find","algo","algo_name","setState","selectedAlgoId","id","handleStartAnalyze","requestBody","upload_id","targetFileId","algo_id","algorithmControl","handleCancel","requestParams","data","items","visible","centered","onCancel","footer","margin","onChange","Search","Input","RangePicker","DatePicker","DashboardTable","timeRange","on","getFileList","product","tab","uploadList","forEach","uploadItem","fileList","filteredFileList","refresh","onSearch","filter","record","upload_name","includes","handleSelectFile","fileName","selectedFile","file","file_name","selectTimeRange","applyTimeRange","moment","unix","created_at","isBetween","algoList","prevProps","prevState","uploadInProgress","bulkActionMenu","filterPopup","showTime","format","ranges","startOf","allowClear","disabledDate","current","endOf","onOk","formColumns","dataIndex","render","text","Date","toString","split","splice","color","shape","CloudUploadOutlined","drawerControl","overlay","trigger","UnorderedListOutlined","placement","content","FilterOutlined","size","width","padding","ReloadOutlined","rowSelection","pagination","pageSize","columns","dataSource","DashboardMain","zhtab","ghost","tags","subTitle","slice","length","extra","ExportOutlined","dot","BellOutlined","column","paddingTop","label","userInfo","remark","orientation","Step","Steps","UploadController","componentDidMount","modalVisible","getFileMD5","fileMD5","fileKey","file_info","file_key","file_size","uploadName","err","awsMetaData","s3Client","getS3Client","authorization","step","progress","uploadFile","md5Hash","Promise","resolve","reject","blobSlice","File","prototype","chunks","Math","ceil","currentChunk","spark","SparkMD5","ArrayBuffer","fileReader","FileReader","loadNext","start","end","readAsArrayBuffer","call","onload","append","target","parseFloat","toFixed","onerror","onabort","cognitoIdentityCredentials","credentials","AWS","CognitoIdentityCredentials","IdentityPoolId","identity_pool_id","IdentityId","identity_id","Logins","token","config","update","region","S3","apiVersion","maxRetries","httpOptions","connectTimeout","timeout","uploadConfig","Key","Bucket","bucket","UploadId","remote_upload_id","uploadPart","parts","fullPartInfo","assign","asyncS3Fetch","completeUpload","s3","fileId","partInfo","i","push","PartNumber","ETag","Body","Uint8Array","recordPart","partNumber","partETag","partSize","part_number","part_etag","part_size","uploadId","etag","location","functionName","stepDescription","currentStep","handleClose","uploadControl","direction","percent","status","description","TextArea","formItemLayout","labelCol","wrapperCol","UploadSession","inputUploadName","selectService","serviceType","setAccident","checked","isAccident","onSubmit","service","loadFile","fileData","Array","isArray","formRef","createRef","uploadTagOptions","drawerVisible","onClose","destroyOnClose","bodyStyle","paddingBottom","textAlign","marginRight","validateFields","catch","errorInfo","disabled","ref","rows","initialValue","checkedChildren","unCheckedChildren","isAfter","getValueFromEvent","Dragger","beforeUpload","InboxOutlined","offset","Content","Sider","Footer","Dashboard","handleSelect","defaultSelectedKeys","onSelect","SisternodeOutlined","NodeIndexOutlined","ExperimentOutlined","minHeight","App","logUser","inputLanguage","mountSignin","to","mountDashboard","bind","exact","path","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f54889c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\n\r\nimport 'styles/Logo.css'\r\n\r\nimport logo from 'assets/logo.svg';\r\n\r\nconst Logo = () => (\r\n  <div className=\"Logo\">\r\n    <div className=\"Logo-icon-box\">\r\n    <img src={logo} className=\"Logo-icon\" alt=\"logo\" />\r\n    </div>\r\n    <span className=\"Logo-title\">FOVA Energy</span>\r\n  </div>\r\n)\r\n\r\nexport default Logo;\r\n","import { message } from 'antd';\r\n\r\n/**\r\n * Type Definitions for HTTP request header and response data.\r\n */\r\ntype HeaderType = {\r\n  'X-CSRFToken': string;\r\n  'Content-Type': string;\r\n}\r\n\r\nexport type SuccessResponseDataType = {\r\n  code: string;\r\n  data: any;\r\n}\r\n\r\nexport type ErrorResponseDataType = {\r\n  code: string;\r\n  error: string;\r\n}\r\n\r\ntype ResponseDataType = SuccessResponseDataType | ErrorResponseDataType;\r\ninterface ParamsType { [key: string]: string | number };\r\n\r\n/**\r\n * The only hard coded CSRF token, the rest should be extracted from cookies using parseCookies('csrf_token') after logging in\r\n */\r\nconst LOGIN_CSRFToken: string = \"ImI0M2ZlZjgxZmRiNTAwZWMxYmE4NDYzYjQzNTM1MDFmZTk5OWRjOGEi.Xyw2Iw.xYuZelp39q-HpjGf_abdtEdT-Ag\";\r\n\r\n/**\r\n * Utility function to get specific info from cookies\r\n * @param key : 'csrf_token' | 'session'\r\n * @returns : string - section of cookie\r\n */\r\nconst parseCookies = (key: string): string => {\r\n  let match = document.cookie.match(new RegExp('(^| )' + key + '=([^;]+)'));\r\n  if (match) {\r\n    let result = \"\";\r\n    try {\r\n      result = decodeURIComponent(match[2]);\r\n    } catch (error) {\r\n      console.warn(\"Cookie parse error: \", error);\r\n    }\r\n    return result;\r\n  };\r\n  return \"\";\r\n}\r\n\r\n/**\r\n * Generate query string from parameters object for GET request URL\r\n * @param params : { [key: string]: string | number } - parameters object\r\n */\r\nconst queryString = (params: ParamsType): string =>\r\n  Object.keys(params).map((key: string): string =>\r\n    encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\r\n  ).join('&');\r\n\r\n/**\r\n * POST HTTP Request API\r\n * @param url : string - rooted at proxy in package.json, start with \r\n * @param requestData : string - JSON string, e.g. JSON.stringify(rawData)\r\n * @returns : Promise<ResponseDataType> - Promise resolves to JSON respond body\r\n */\r\nexport const post = async (url: string, requestData?: string): Promise<ResponseDataType> => {\r\n\r\n  let header: HeaderType = {\r\n    'X-CSRFToken': (url === '/api/account/login') ? LOGIN_CSRFToken : parseCookies('csrf_token'),\r\n    'Content-Type': 'application/json'\r\n  }\r\n\r\n  return fetch(url, {\r\n    method: 'POST',\r\n    headers: header,\r\n    body: requestData\r\n  })\r\n    .then((response: Response): Promise<any> => response.json())\r\n    .then((responseData: ResponseDataType) => {\r\n      if (responseData.code === 'OK') {\r\n        console.log('SUCCESS!', url, header, requestData, responseData);\r\n      } else {\r\n        console.warn('FAIL!', url, header, requestData, responseData);\r\n      }\r\n      return responseData;\r\n    });\r\n}\r\n\r\n/**\r\n * GET HTTP Request API\r\n * @param url : string - rooted at proxy in package.json, start with \"/\"\r\n * @returns : Promise<ResponseDataType> - Promise resolves to JSON respond body\r\n */\r\nexport const get = async (url: string, params?: ParamsType): Promise<ResponseDataType> => {\r\n\r\n  if (params !== undefined) {\r\n    url = url + '?' + queryString(params);\r\n  }\r\n\r\n  return fetch(url, {\r\n    method: 'GET'\r\n  })\r\n    .then((response: Response): Promise<any> => response.json())\r\n    .then((responseData: ResponseDataType) => {\r\n      if (responseData.code === 'OK') {\r\n        console.log('SUCCESS!', url, responseData);\r\n      } else {\r\n        console.warn('FAIL!', url, responseData);\r\n      }\r\n      return responseData;\r\n    });\r\n}\r\n\r\n/**\r\n * Utility function to handle different error\r\n */\r\nexport const handleError = (errorCode: string, language: 'en-us' | 'zh-hans') => {\r\n\r\n  if (messageLanguageMap.get(errorCode) === undefined) {\r\n    message.error(messageLanguageMap.get(\"default\") + errorCode)\r\n    return;\r\n  }\r\n\r\n  if (language === 'en-us') {\r\n    message.warn(messageLanguageMap.get(errorCode)?.[\"en-us\"]);\r\n  }\r\n  else if (language === 'zh-hans') {\r\n    message.warn(messageLanguageMap.get(errorCode)?.[\"zh-hans\"]);\r\n  }\r\n}\r\n\r\n/**\r\n * Product informations defined in API\r\n */\r\ninterface ProductsInfoType {\r\n  [key: string]: {\r\n    productId: number,\r\n    productName: string,\r\n    productDescription: string\r\n  }\r\n}\r\nexport const ProductsInfo: ProductsInfoType = {\r\n  \"EV Management\": {\r\n    productId: 1,\r\n    productName: \"ev\",\r\n    productDescription: \"EV\"\r\n  },\r\n  \"ESS Management\": {\r\n    productId: 2,\r\n    productName: \"ess\",\r\n    productDescription: \"ESS\"\r\n  },\r\n  \"R&D Management\": {\r\n    productId: 3,\r\n    productName: \"rd\",\r\n    productDescription: \"RD\"\r\n  }\r\n}\r\n\r\n/**\r\n * Error messages for corresponding error codes in Engish and Chinese\r\n */\r\ntype LanguageMapType = Map<string, { \"en-us\": string; \"zh-hans\": string }>;\r\nexport const messageLanguageMap: LanguageMapType = new Map([\r\n  [\"User Not Exist\",\r\n    {\r\n      \"en-us\": \"The credential you provided does not match our record. Please try again. \",\r\n      \"zh-hans\": \"您所提供的登录信息有误，请重试。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Password Error\",\r\n    {\r\n      \"en-us\": \"The credential you provided does not match our record. Please try again. \",\r\n      \"zh-hans\": \"您所提供的登录信息有误，请重试。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Login Required\",\r\n    {\r\n      \"en-us\": \"Login is required for this operation.\",\r\n      \"zh-hans\": \"此操作需要登录权限，请登录。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Product Not Allowed\",\r\n    {\r\n      \"en-us\": \"Product permission denied. Please contact administrator. \",\r\n      \"zh-hans\": \"您暂时没有使用此服务的权限，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Internal Server Error\",\r\n    {\r\n      \"en-us\": \"Internal Server Error. Please contact administrator. \",\r\n      \"zh-hans\": \"系统内部错误，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"External Error\",\r\n    {\r\n      \"en-us\": \"External Error. Please contact administrator. \",\r\n      \"zh-hans\": \"系统外部错误，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"Method Not Allowed\",\r\n    {\r\n      \"en-us\": \"HTTP method Error. Please contact administrator. \",\r\n      \"zh-hans\": \"无效的HTTP请求，请联系管理员。\"\r\n    }\r\n  ],\r\n  [\r\n    \"defualt\",\r\n    {\r\n      \"en-us\": \"An unkown error has occured, CODE: \",\r\n      \"zh-hans\": \"未知错误，错误码：\"\r\n    }\r\n  ]\r\n])\r\n","import React from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  GlobalOutlined,\r\n  LogoutOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/TopBar.css';\r\n\r\nimport Logo from 'components/Logo';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Header } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\ntype PropsType = {\r\n  authorized: boolean;\r\n  language: 'en-us' | 'zh-hans';\r\n  handleSignout: () => void;\r\n  switchLanguage: (inputLanguage: 'en-us' | 'zh-hans') => void;\r\n}\r\n\r\nclass TopBar extends React.Component<PropsType> {\r\n\r\n  handleSelectLanguage = (event: any) => {\r\n    this.props.switchLanguage(event.key);\r\n  }\r\n\r\n  handleClickLogout = () => {\r\n    APIUtils.post('/api/account/logout')\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.props.handleSignout();\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      });\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n\r\n    const userMenu = (\r\n      <Menu.Item\r\n        key=\"menu-signout\"\r\n        icon={<LogoutOutlined height=\"3em\" />}\r\n        style={{ float: \"right\" }}\r\n        onClick={this.handleClickLogout}\r\n      >\r\n        {this.enzh('Sign Out', '退出登录')}\r\n      </Menu.Item>\r\n    )\r\n\r\n    return (\r\n      <div className=\"TopBar\">\r\n        <Header className=\"header\">\r\n          <Logo />\r\n          <Menu theme=\"dark\" mode=\"horizontal\">\r\n            {this.props.authorized ? userMenu : null}\r\n            <SubMenu\r\n              key=\"menu-language\"\r\n              icon={<GlobalOutlined height=\"3em\" />}\r\n              title={this.enzh('Intl-English', 'Intl-简体中文')}\r\n              style={{ float: \"right\" }}\r\n            >\r\n              <Menu.Item key=\"zh-hans\" onClick={this.handleSelectLanguage}>简体中文</Menu.Item>\r\n              <Menu.Item key=\"en-us\" onClick={this.handleSelectLanguage}>English - US</Menu.Item>\r\n            </SubMenu>\r\n          </Menu>\r\n        </Header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\n\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\nimport 'styles/Signin.css';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\ntype PropsType = {\r\n  handleSignin: () => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass Signin extends React.Component<PropsType> {\r\n\r\n  onFinish = (values: any) => {\r\n    let signinData = {\r\n      name: values.username,\r\n      password: values.password\r\n    }\r\n\r\n    APIUtils.post('/api/account/login', JSON.stringify(signinData))\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.props.handleSignin();\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Signin\">\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-form\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={this.onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[{\r\n              required: true,\r\n              message: this.props.language === 'en-us' ?\r\n                \"Please input your name\" :\r\n                \"请输入用户名\"\r\n            }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder={\r\n                this.props.language === 'en-us' ?\r\n                  \"Name\" : \"用户名\"\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{\r\n              required: true,\r\n              message: this.props.language === 'en-us' ?\r\n                \"Please input your Password\" :\r\n                \"请输入登录口令\"\r\n            }]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              placeholder={\r\n                this.props.language === 'en-us' ?\r\n                  \"Password\" : \"登录口令\"\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Form.Item name=\"remember\" valuePropName=\"unchecked\" noStyle>\r\n              <Checkbox>\r\n                {this.props.language === 'en-us' ? 'Remember me' : '保存登录信息'}\r\n              </Checkbox>\r\n            </Form.Item>\r\n            <a href=\"/\" onClick={e => e.preventDefault()} className=\"login-form-portal\">\r\n              {this.props.language === 'en-us' ? 'Administartor Portal' : '管理员通道'}\r\n            </a>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n              {this.props.language === 'en-us' ? \"Log in\" : \"登录\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\n\r\nimport 'styles/DashboardCharts.css';\r\n\r\nclass DashboardCharts extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"DashboardCharts\">\r\n        <Row gutter={16}>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <div className=\"chart-box\">\r\n              <p className=\"placeholder\">&lt;Result Data&gt;</p>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardCharts;\r\n","import React from 'react';\r\nimport {\r\n  message,\r\n  Modal,\r\n  Button,\r\n  Select\r\n} from 'antd';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Option } = Select;\r\n\r\ntype PropsType = {\r\n  targetFileId: string;\r\n  algorithmControl: (on: boolean) => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  algorithmList: any[];\r\n  selectedAlgoId: string;\r\n}\r\n\r\nclass AlgorithmController extends React.Component<PropsType, StateType> {\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      algorithmList: [],\r\n      selectedAlgoId: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let requestParams = {\r\n      upload_id: this.props.targetFileId\r\n    }\r\n    APIUtils.get('/api/data/algorithm/list', requestParams)\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          this.setState({\r\n            algorithmList: (response as APIUtils.SuccessResponseDataType).data.items\r\n          });\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      });\r\n  }\r\n\r\n  handleSelectAlgo = (value: string) => {\r\n    let selectedAlgo = this.state.algorithmList.find(algo => algo.algo_name === value);\r\n    if (selectedAlgo === undefined) {\r\n      console.warn(\"Cannot find \", value, \"in\", this.state.algorithmList)\r\n      return;\r\n    }\r\n    this.setState({\r\n      selectedAlgoId: selectedAlgo.id\r\n    })\r\n    console.log(\"Algorithm selected\", selectedAlgo.id);\r\n  }\r\n\r\n  handleStartAnalyze = () => {\r\n    if (this.state.selectedAlgoId === \"\") {\r\n      message.warn(\"Please select an algorithm!\");\r\n      return;\r\n    }\r\n    let requestBody = {\r\n      upload_id: this.props.targetFileId,\r\n      algo_id: this.state.selectedAlgoId\r\n    }\r\n    APIUtils.post('/api/data/analysis/start', JSON.stringify(requestBody))\r\n    .then(response => {\r\n      if (response.code !== 'OK') {\r\n        APIUtils.handleError(response.code, this.props.language);\r\n      }\r\n      this.props.algorithmControl(false);\r\n    })\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.props.algorithmControl(false);\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AlgorithmController\">\r\n        <Modal\r\n          title={this.enzh(\"Select Algorithm\", \"算法选择\")}\r\n          visible={true}\r\n          centered\r\n          onCancel={this.handleCancel}\r\n          footer={[\r\n            <Button key=\"back\" onClick={this.handleCancel}>\r\n              {this.enzh(\"Cancel\", \"取消\")}\r\n            </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={this.handleStartAnalyze}>\r\n              {this.enzh(\"Start Analyzing\", \"开始分析\")}\r\n            </Button>,\r\n          ]}\r\n        >\r\n          <Select\r\n            placeholder={this.enzh(\"Please select an Algorithm\", \"请选择算法\")}\r\n            style={{ margin: \"auto\" }}\r\n            onChange={this.handleSelectAlgo}\r\n          >\r\n            {this.state.algorithmList.map((algo =>\r\n              (<Option key={algo.algo_name} value={algo.algo_name}>{algo.algo_name}</Option>)))}\r\n          </Select>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlgorithmController;","import React from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n  Button,\r\n  Table,\r\n  Tag,\r\n  Input,\r\n  Popover,\r\n  Dropdown,\r\n  Menu,\r\n  DatePicker,\r\n} from 'antd';\r\n\r\nimport {\r\n  CloudUploadOutlined,\r\n  UnorderedListOutlined,\r\n  FilterOutlined,\r\n  ReloadOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/DashboardTable.css';\r\n\r\nimport AlgorithmController from 'components/AlgorithmController';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Search } = Input;\r\nconst { RangePicker } = DatePicker;\r\n\r\ntype PropsType = {\r\n  tab: string;\r\n  uploadInProgress: boolean;\r\n  drawerControl: (on: boolean) => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  fileList: any[];\r\n  filteredFileList: any[];\r\n  algoList: any[];\r\n  algorithmControl: boolean;\r\n  refresh: boolean;\r\n}\r\n\r\ntype TimeRangeType = [moment.Moment, moment.Moment]\r\n\r\nclass DashboardTable extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n  targetFileId: string;\r\n  timeRange: TimeRangeType;\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      fileList: [],\r\n      filteredFileList: [],\r\n      algoList: [],\r\n      algorithmControl: false,\r\n      refresh: false\r\n    }\r\n\r\n    this.targetFileId = \"\";\r\n    this.timeRange = [moment(0), moment(0)];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getFileList();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: StateType) {\r\n    if (this.props.tab !== prevProps.tab ||\r\n      this.props.uploadInProgress !== prevProps.uploadInProgress ||\r\n      this.state.refresh !== prevState.refresh ||\r\n      this.state.algorithmControl !== prevState.algorithmControl\r\n    ) {\r\n      this.getFileList();\r\n    }\r\n  }\r\n\r\n  algorithmControl = (on: boolean) => this.setState({ algorithmControl: on });\r\n\r\n  getFileList = () => {\r\n    let requestParams = {\r\n      product: APIUtils.ProductsInfo[this.props.tab].productName\r\n    }\r\n\r\n    APIUtils.get('/api/data/upload/list', requestParams)\r\n      .then(response => {\r\n        if (response.code === 'OK') {\r\n          // assign a unique key for each row of the table\r\n          let uploadList: any[] = (response as APIUtils.SuccessResponseDataType).data.items;\r\n          uploadList.forEach((uploadItem: any) => {\r\n            uploadItem.key = uploadItem.id;\r\n          });\r\n          this.setState({\r\n            fileList: uploadList,\r\n            filteredFileList: uploadList\r\n          })\r\n        } else {\r\n          APIUtils.handleError(response.code, this.props.language);\r\n        }\r\n      })\r\n  }\r\n\r\n  refresh = () => {\r\n    this.setState((state, props) => ({\r\n      refresh: !state.refresh\r\n    }));\r\n  }\r\n\r\n  onSearch = (value: string) => {\r\n    if (value === \"\") {\r\n      this.setState({\r\n        filteredFileList: this.state.fileList\r\n      })\r\n    }\r\n    this.setState(state => ({\r\n      filteredFileList: state.filteredFileList.filter(record => record.upload_name.includes(value))\r\n    }));\r\n  }\r\n\r\n  handleSelectFile = (e: any, fileName: string) => {\r\n    e.preventDefault();\r\n    let selectedFile = this.state.fileList.find(file => file.file_name === fileName);\r\n    if (selectedFile === undefined) {\r\n      console.warn(\"Cannot find \", fileName, \"in\", this.state.fileList);\r\n      return;\r\n    }\r\n    this.targetFileId = selectedFile.id;\r\n    console.log(\"File selected\", this.targetFileId)\r\n    this.setState({\r\n      algorithmControl: true\r\n    })\r\n  }\r\n\r\n  selectTimeRange = (value: any) => {\r\n    this.timeRange = value;\r\n  }\r\n\r\n  applyTimeRange = () => {\r\n    console.log(\"Time range selected: \", this.timeRange);\r\n    this.setState(state => ({\r\n      filteredFileList: state.filteredFileList.filter(record =>\r\n        moment.unix(record.created_at).isBetween(this.timeRange[0], this.timeRange[1]))\r\n    }));\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n\r\n    let bulkActionMenu = (\r\n      <Menu>\r\n        <Menu.Item key=\"bulk-choose-algo\">{this.enzh(\"Choose Algorithm\", \"选择算法\")}</Menu.Item>\r\n        <Menu.Item key=\"bulk-view-result\">{this.enzh(\"View Result\", \"查看结果\")}</Menu.Item>\r\n      </Menu>\r\n    )\r\n\r\n    let filterPopup = (\r\n      <div>\r\n        <RangePicker\r\n          showTime={{ format: 'HH:mm' }}\r\n          format=\"YYYY-MM-DD HH:mm\"\r\n          ranges={{\r\n            'Today': [moment(), moment()],\r\n            'This Month': [moment().startOf('month'), moment()],\r\n            'This Year': [moment().startOf('year'), moment()]\r\n          }}\r\n          allowClear={true}\r\n          disabledDate={(current: moment.Moment) => current > moment().endOf('day')}\r\n          onChange={this.selectTimeRange}\r\n          onOk={this.applyTimeRange}\r\n        />\r\n      </div>\r\n    )\r\n\r\n    let formColumns = [\r\n      {\r\n        title: this.enzh('File Name', '数据名'),\r\n        dataIndex: 'upload_name',\r\n        key: 'file_name',\r\n      },\r\n      {\r\n        title: this.enzh('File Key', '数据编码'),\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n      },\r\n      {\r\n        title: this.enzh('Upload Time', '上传时间'),\r\n        dataIndex: 'created_at',\r\n        key: 'created_at',\r\n        render: (text: number) => {\r\n          let current = new Date(text * 1000);\r\n          return <div>{current.toString().split(' ').splice(0, 6).join(' ')}</div>\r\n        }\r\n      },\r\n      {\r\n        title: this.enzh('Status', '状态'),\r\n        dataIndex: 'state',\r\n        key: 'state',\r\n        render: (text: string) => {\r\n          switch (text) {\r\n            case 'uploaded-raw':\r\n              return (<Tag color=\"cyan\">{this.enzh(\"Uploaded\", \"上传完成\")}</Tag>);\r\n            case 'init':\r\n              return (<Tag color=\"green\">{this.enzh(\"Analyzing\", \"分析中\")}</Tag>);\r\n            default:\r\n              return (<Tag color=\"blue\">{this.enzh(\"Complete\", \"分析完成\")}</Tag>);\r\n          }\r\n        },\r\n      },\r\n      {\r\n        title: this.enzh('Action', '可选操作'),\r\n        dataIndex: '',\r\n        key: 'x',\r\n        render: (text: any, record: any) => {\r\n          if (record.state === 'uploaded-raw') {\r\n            return (<a href=\"/#\" onClick={e => { this.handleSelectFile(e, record.file_name) }}>{this.enzh(\"Select Algorithm\", \"选择算法\")}</a>);\r\n          } else if (record.state === 'init') {\r\n            return (<span style={{ color: \"#00000040\" }}>{this.enzh(\"Analyze in Progress\", \"分析中\")}</span>);\r\n          } else {\r\n            return (<a href=\"/#\" onClick={e => { e.preventDefault() }}>{this.enzh(\"View Result\", \"查看结果\")}</a>);\r\n          }\r\n        },\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <div className=\"DashboardTable\">\r\n        <Button\r\n          className=\"table-button\"\r\n          type=\"primary\"\r\n          shape=\"round\"\r\n          icon={<CloudUploadOutlined />}\r\n          onClick={() => this.props.drawerControl(true)}\r\n        >\r\n          {this.enzh(\"New Upload\", \"上传数据\")}\r\n        </Button>\r\n\r\n        <Dropdown overlay={bulkActionMenu} trigger={['click']}>\r\n          <Button\r\n            className=\"table-button\"\r\n            shape=\"round\"\r\n            icon={<UnorderedListOutlined />}\r\n          >\r\n            {this.enzh(\"Bulk Action\", \"多选操作\")}\r\n        </Button>\r\n        </Dropdown>\r\n\r\n        <Popover\r\n          placement=\"bottomLeft\"\r\n          content={filterPopup}\r\n          trigger=\"click\"\r\n        >\r\n          <Button\r\n            className=\"table-button\"\r\n            shape=\"round\"\r\n            icon={<FilterOutlined />}\r\n          >\r\n            {this.enzh(\"Filter\", \"筛选\")}\r\n          </Button>\r\n        </Popover>\r\n\r\n        <Search\r\n          key={this.state.refresh.toString()}\r\n          onSearch={this.onSearch}\r\n          size=\"small\"\r\n          style={{\r\n            width: 200,\r\n            padding: \"5px\",\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          className=\"table-button refresh\"\r\n          shape=\"round\"\r\n          type=\"link\"\r\n          icon={<ReloadOutlined />}\r\n          onClick={this.refresh}\r\n        >\r\n          {this.enzh(\"Refresh / Clear Filter\", \"重置\")}\r\n        </Button>\r\n\r\n        <Table\r\n          size=\"middle\"\r\n          rowSelection={{}}\r\n          pagination={{ pageSize: 7 }}\r\n          columns={formColumns}\r\n          dataSource={this.state.filteredFileList}\r\n        />\r\n        { this.state.algorithmControl ?\r\n          <AlgorithmController\r\n            targetFileId={this.targetFileId}\r\n            algorithmControl={this.algorithmControl}\r\n            language={this.props.language}\r\n          /> : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardTable;\r\n","import React from 'react';\r\nimport {\r\n  PageHeader,\r\n  Button,\r\n  Divider,\r\n  Descriptions,\r\n  Tag,\r\n  Badge,\r\n} from 'antd';\r\nimport {\r\n  ExportOutlined,\r\n  BellOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/DashboardMain.css';\r\n\r\nimport DashboardCharts from 'components/DashboardCharts';\r\nimport DashboardTable from 'components/DashboardTable';\r\n\r\ntype PropsType = {\r\n  tab: string;\r\n  userInfo: any;\r\n  uploadInProgress: boolean;\r\n  drawerControl: (on: boolean) => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass DashboardMain extends React.Component<PropsType> {\r\n  \r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  zhtab = (english: string): string => {\r\n    switch (english) {\r\n      case \"EV Management\":\r\n        return \"电动汽车分析平台\";\r\n      case \"ESS Management\":\r\n        return \"储能系统分析平台\";\r\n      case \"R&D Management\":\r\n        return \"电池研发测试分析平台\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  } \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"DashboardMain\">\r\n        <PageHeader\r\n          ghost={false}\r\n          title={this.enzh(this.props.tab, this.zhtab(this.props.tab))}\r\n          tags={<Tag color=\"orange\">Admin</Tag>}\r\n          subTitle={\r\n            this.enzh(`Manage ${this.props.tab.split(' ')[0]} upload items`,\r\n              `管理${this.zhtab(this.props.tab).slice(0, this.zhtab(this.props.tab).length - 2)}数据`)\r\n          }\r\n          extra={[\r\n            <Button\r\n              key=\"upload-button\"\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              icon={<ExportOutlined />}\r\n            >\r\n              {this.enzh(\"Export\", \"下载结果\")}\r\n            </Button>,\r\n            <Badge dot\r\n              key=\"notification-badge\">\r\n              <Button\r\n                key=\"notification-button\"\r\n                shape=\"circle\"\r\n                icon={<BellOutlined />}\r\n              />\r\n            </Badge>\r\n          ]}\r\n          style={{\r\n            padding: '0px 5px 15px'\r\n          }}\r\n        >\r\n          <Descriptions size=\"small\" column={3} style={{ paddingTop: \"3px\" }}>\r\n            <Descriptions.Item label={this.enzh(\"Owner\", \"用户\")}>\r\n              {this.props.userInfo.name}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label={this.enzh(\"Affiliation\", \"编号\")}>\r\n              {this.props.userInfo.id}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label={this.enzh(\"Remarks\", \"备注\")}>\r\n              {this.props.userInfo.remark}\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n        </PageHeader>\r\n        <DashboardCharts />\r\n        <Divider orientation=\"left\">{this.enzh(\"Manage Uploads\", \"项目管理\")}</Divider>\r\n        <DashboardTable\r\n          tab={this.props.tab}\r\n          uploadInProgress={this.props.uploadInProgress}\r\n          drawerControl={this.props.drawerControl}\r\n          language={this.props.language}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardMain;\r\n","import React from 'react';\r\nimport AWS from 'aws-sdk';\r\nimport SparkMD5 from 'spark-md5';\r\nimport { Modal, Steps } from 'antd';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { Step } = Steps;\r\n\r\ntype PropsType = {\r\n  file: File;\r\n  uploadName: string;\r\n  product: string;\r\n  uploadControl: (on: boolean) => void;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  modalVisible: boolean;\r\n  step: number;\r\n  progress: number;\r\n  err: boolean;\r\n}\r\n\r\nclass UploadController extends React.Component<PropsType, StateType> {\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      modalVisible: false,\r\n      step: 0,\r\n      progress: 0,\r\n      err: false\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let file = this.props.file;\r\n    console.log(\"File recieved\", file)\r\n\r\n    this.setState({\r\n      modalVisible: true\r\n    });\r\n\r\n    this.getFileMD5(file).then(fileMD5 => {\r\n      let fileKey = fileMD5;\r\n      console.log(\"MD5 hash complete\", fileMD5)\r\n      let file_info = {\r\n        file_key: fileKey,\r\n        file_name: file.name,\r\n        file_size: file.size,\r\n        upload_name: this.props.uploadName,\r\n        product: this.props.product\r\n      }\r\n\r\n      APIUtils.post('/api/data/multipart_upload/init', JSON.stringify(file_info))\r\n        .then(response => {\r\n          if (response.code !== 'OK') {\r\n            this.setState({\r\n              err: true\r\n            })\r\n            APIUtils.handleError(response.code, this.props.language);\r\n          }\r\n\r\n          let awsMetaData = (response as APIUtils.SuccessResponseDataType).data;\r\n          console.log(\"AWS metadata acquired\", awsMetaData)\r\n\r\n          let s3Client = this.getS3Client(awsMetaData.authorization);\r\n\r\n          this.setState({\r\n            step: 1,\r\n            progress: 0\r\n          });\r\n\r\n          try {\r\n            this.uploadFile(s3Client, awsMetaData, file, fileMD5)\r\n          } catch (err) {\r\n            this.setState({ err: true });\r\n            console.warn(err);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  getFileMD5 = async (file: File) => {\r\n    try {\r\n      return await this.md5Hash(file);\r\n    } catch (err) {\r\n      this.setState({ err: true });\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  md5Hash = (file: File) => {\r\n    return new Promise((resolve, reject) => {\r\n      var blobSlice = File.prototype.slice,\r\n        chunkSize = 5 * 1024 * 1024,\r\n        chunks = Math.ceil(file.size / chunkSize),\r\n        currentChunk = 0,\r\n        spark = new SparkMD5.ArrayBuffer(),\r\n        fileReader = new FileReader();\r\n\r\n      fileReader.onload = (e: any) => {\r\n        spark.append(e.target.result);\r\n        currentChunk++;\r\n\r\n        this.setState({\r\n          progress: parseFloat((currentChunk / chunks * 100).toFixed(2))\r\n        })\r\n\r\n        if (currentChunk < chunks) {\r\n          loadNext();\r\n        } else {\r\n          console.log('finished loading');\r\n          resolve(spark.end());\r\n        }\r\n      };\r\n\r\n      fileReader.onerror = () => {\r\n        this.setState({ err: true });\r\n        console.warn('oops, something went wrong.');\r\n      };\r\n\r\n      fileReader.onabort = () => {\r\n        console.warn('abort.');\r\n      };\r\n\r\n      function loadNext() {\r\n        let start = currentChunk * chunkSize,\r\n          end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\r\n        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\r\n      }\r\n      loadNext();\r\n    })\r\n  }\r\n\r\n  getS3Client = (cognitoIdentityCredentials: any) => {\r\n    // var identity_provider = cognitoIdentityCredentials.identity_provider;\r\n    let credentials = new AWS.CognitoIdentityCredentials({\r\n      IdentityPoolId: cognitoIdentityCredentials.identity_pool_id,\r\n      IdentityId: cognitoIdentityCredentials.identity_id,\r\n      Logins: {\r\n        // identity_provider: cognitoIdentityCredentials.token\r\n        'cognito-identity.amazonaws.com': cognitoIdentityCredentials.token\r\n      },\r\n    })\r\n\r\n    AWS.config.update({\r\n      credentials: credentials,\r\n      region: cognitoIdentityCredentials.region,\r\n    })\r\n\r\n    let s3 = new AWS.S3({\r\n      apiVersion: '2006-03-01',\r\n      maxRetries: 3,\r\n      httpOptions: {\r\n        connectTimeout: 1000 * 10,\r\n        timeout: 1000 * 60 * 10,\r\n      }\r\n    });\r\n\r\n    return s3;\r\n  }\r\n\r\n  uploadFile = async (s3Client: any, awsMetaData: any, file: any, fileKey: any) => {\r\n    let uploadConfig = {\r\n      Key: fileKey,\r\n      Bucket: awsMetaData.bucket,\r\n      UploadId: awsMetaData.remote_upload_id\r\n    }\r\n\r\n    console.log(\"Upload configuration generated\", uploadConfig);\r\n\r\n    let fullPartInfo = await this.uploadPart(s3Client, uploadConfig, awsMetaData.id, file, awsMetaData.parts);\r\n    console.log(\"Full part infomation generated\", fullPartInfo);\r\n    let params = Object.assign({ 'MultipartUpload': fullPartInfo }, uploadConfig);\r\n    console.log(\"Params genterated\", params);\r\n    let result = await this.asyncS3Fetch(s3Client, 'completeMultipartUpload', params);\r\n    console.log(\"Result params returned\", result);\r\n    this.completeUpload(awsMetaData.id, fileKey, result['ETag'], result['Location']);\r\n  }\r\n\r\n  uploadPart = async (s3: any, config: any, fileId: any, file: any, parts: any) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      var blobSlice = File.prototype.slice,\r\n        chunkSize = 5 * 1024 * 1024,\r\n        chunks = Math.ceil(file.size / chunkSize),\r\n        currentChunk = parts.length > 0 ? parts[parts.length - 1]['part_number'] : 0,\r\n        fileReader = new FileReader(),\r\n        partInfo: any = {\r\n          'Parts': []\r\n        };\r\n\r\n      for (var i of parts) {\r\n        partInfo['Parts'].push({\r\n          PartNumber: i['part_number'],\r\n          ETag: i['etag']\r\n        })\r\n      }\r\n\r\n      fileReader.onload = async (e: any) => {\r\n\r\n        if (currentChunk < chunks) {\r\n          var params = Object.assign({\r\n            Body: new Uint8Array(e.target.result),\r\n            PartNumber: currentChunk + 1,\r\n          }, config);\r\n          let response = await this.asyncS3Fetch(s3, 'uploadPart', params);\r\n          partInfo['Parts'].push({\r\n            PartNumber: params['PartNumber'],\r\n            ETag: response.ETag\r\n          })\r\n\r\n          this.recordPart(fileId, params['PartNumber'], response.ETag, params['Body'].length);\r\n\r\n          currentChunk++;\r\n          this.setState({\r\n            progress: parseFloat((currentChunk / chunks * 100).toFixed(2))\r\n          });\r\n\r\n          loadNext();\r\n        } else {\r\n          console.log('finished loading');\r\n          resolve(partInfo)\r\n        }\r\n      };\r\n\r\n      fileReader.onerror = () => {\r\n        this.setState({ err: true });\r\n        console.warn('oops, something went wrong.');\r\n        resolve()\r\n      };\r\n\r\n      fileReader.onabort = () => {\r\n        console.warn('abort.');\r\n        resolve()\r\n      };\r\n\r\n      function loadNext() {\r\n        var start = currentChunk * chunkSize,\r\n          end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\r\n\r\n        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\r\n      }\r\n      loadNext();\r\n    })\r\n  }\r\n\r\n  recordPart = (fileId: string, partNumber: number, partETag: string, partSize: number) => {\r\n    var requestData = {\r\n      upload_id: fileId,\r\n      part_number: partNumber,\r\n      part_etag: partETag,\r\n      part_size: partSize\r\n    }\r\n\r\n    APIUtils.post('/api/data/multipart_upload/add_part', JSON.stringify(requestData))\r\n    .then(response => {\r\n      if (response.code !== 'OK') {\r\n        this.setState({\r\n          err: true\r\n        })\r\n        APIUtils.handleError(response.code, this.props.language);\r\n      }\r\n    })\r\n  }\r\n\r\n  completeUpload = (uploadId: string, fileKey: string, etag: string, location: string) => {\r\n    let requestData = {\r\n      upload_id: uploadId,\r\n      file_key: fileKey,\r\n      etag: etag,\r\n      location: location\r\n    }\r\n\r\n    APIUtils.post('/api/data/multipart_upload/complete', JSON.stringify(requestData))\r\n    .then(response => {\r\n      if (response.code === 'OK') {\r\n        this.setState({\r\n          step: 3\r\n        });\r\n      } else {\r\n        this.setState({\r\n          err: true\r\n        })\r\n        APIUtils.handleError(response.code, this.props.language);\r\n      }\r\n    })\r\n  }\r\n\r\n  asyncS3Fetch = (s3: any, functionName: string, params: any): any => {\r\n    return new Promise((resolve, reject) => {\r\n      s3[functionName](params, (err: any, data: any) => {\r\n        if (err) {\r\n          this.setState({ err: true });\r\n          console.log('error: ', err);\r\n          resolve(err);\r\n        }\r\n        else {\r\n          console.log('data: ', data);\r\n          resolve(data);\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  stepDescription = (currentStep: number) => {\r\n    if (this.state.step < currentStep) {\r\n      return this.enzh(\"Waiting\", \"等待中...\");\r\n    } else if (this.state.step > currentStep) {\r\n      return this.enzh(\"Finished\", \"已完成\");\r\n    } else {\r\n      return this.enzh(\"Current Progress: \", \"当前进度：\") + this.state.progress + \"%\";\r\n    }\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      modalVisible: false\r\n    });\r\n    if (this.state.step >= 2) {\r\n      this.props.uploadControl(false);\r\n    }\r\n  }\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"UploadController\">\r\n        <Modal\r\n          visible={this.state.modalVisible}\r\n          centered\r\n          title={this.enzh(\"Upload Data\", \"上传数据文件\")}\r\n          footer={null}\r\n          onCancel={this.handleClose}\r\n        >\r\n          <Steps\r\n            direction=\"vertical\"\r\n            current={this.state.step}\r\n            percent={this.state.progress}\r\n            status={this.state.err ? \"error\" : \"process\"}\r\n          >\r\n            <Step\r\n              title={this.enzh(\"Processing File\", \"处理文件\")}\r\n              description={this.stepDescription(0)}\r\n            />\r\n            <Step\r\n              title={this.enzh(\"Uploading File\", \"上传文件\")}\r\n              description={this.stepDescription(1)}\r\n            />\r\n            <Step\r\n              title={this.enzh(\"Upload Finished\", \"上传完成\")}\r\n              description={this.state.step >= 2 ? this.enzh(\"You may now close the window.\", \"您可以关闭此对话框\") : this.enzh(\"Waiting\", \"等待中...\")}\r\n            />\r\n          </Steps>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadController;","import React from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n  Drawer,\r\n  DatePicker,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Select,\r\n  Switch,\r\n  Upload\r\n} from \"antd\";\r\nimport { FormInstance } from 'antd/lib/form';\r\nimport {\r\n  InboxOutlined,\r\n  CloudUploadOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nimport 'styles/Upload.css';\r\n\r\nimport UploadController from \"components/UploadController\";\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 6\r\n  },\r\n  wrapperCol: {\r\n    span: 14\r\n  }\r\n};\r\n\r\ntype PropsType = {\r\n  drawerVisible: boolean;\r\n  uploadInProgress: boolean;\r\n  drawerControl: (on: boolean) => void;\r\n  uploadControl: (on: boolean) => void;\r\n  tab: string;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  fileData: any;\r\n  uploadName: string;\r\n  serviceType: string;\r\n  isAccident: boolean;\r\n}\r\n\r\nclass UploadSession extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      fileData: null,\r\n      uploadName: \"\",\r\n      serviceType: \"ev\",\r\n      isAccident: false\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    if (this.props.tab !== prevProps.tab) {\r\n      switch(this.props.tab) {\r\n        case \"EV Management\":\r\n          this.setState({ serviceType: \"ev\" });\r\n          break;\r\n        case \"ESS Management\":\r\n          this.setState({ serviceType: \"ess\" });\r\n          break;\r\n        case \"R&D Management\":\r\n          this.setState({ serviceType: \"rd\" });\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  inputUploadName = (e: any) => this.setState({ uploadName: e.target.value });\r\n  selectService = (value: string) => this.setState({ serviceType: value });\r\n  setAccident = (checked: boolean) => this.setState({ isAccident: checked });\r\n  onSubmit = (values: any) => {\r\n    console.log(\"Recieved values from form:\", values);\r\n    this.setState({\r\n      uploadName: values.uploadName,\r\n      serviceType: values.service\r\n    })\r\n    this.props.uploadControl(true);\r\n    this.props.drawerControl(false);\r\n  }\r\n\r\n  loadFile = (e: any) => {\r\n    this.setState({\r\n      fileData: e.file\r\n    });\r\n\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  formRef = React.createRef<FormInstance>();\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  render() {\r\n\r\n    let uploadTagOptions = [];\r\n    for (let i = 1; i <= 3; i++) {\r\n      let value = this.state.serviceType.split(' ')[0] + i;\r\n      uploadTagOptions.push(<Option key={value} value={value}>{value}</Option>)\r\n    }\r\n\r\n    return (\r\n      <div className=\"Upload\">\r\n        <div className=\"upload-drawer\">\r\n          <Drawer\r\n            title={this.enzh(\"Start New Upload Session\", \"上传数据\")}\r\n            width={720}\r\n            visible={this.props.drawerVisible}\r\n            onClose={() => this.props.drawerControl(false)}\r\n            destroyOnClose={true}\r\n            bodyStyle={{ paddingBottom: 80 }}\r\n            footer={\r\n              <div\r\n                style={{\r\n                  textAlign: 'left',\r\n                }}\r\n              >\r\n                <Button\r\n                  type=\"primary\"\r\n                  icon={<CloudUploadOutlined />}\r\n                  style={{ marginRight: 8 }}\r\n                  onClick={() => {\r\n                    this.formRef.current?.validateFields()\r\n                    .then(this.onSubmit)\r\n                    .catch(errorInfo => {\r\n                      console.warn(\"Form validation error: \", errorInfo);\r\n                    })\r\n                  }}\r\n                  disabled={\r\n                    !this.state.fileData || this.state.uploadName === \"\"\r\n                  }\r\n                >\r\n                  {this.enzh(\"Start Upload\", \"开始上传\")}\r\n                </Button>\r\n                <Button onClick={() => this.props.drawerControl(false)}>\r\n                  {this.enzh(\"Cancel\", \"取消\")}\r\n                </Button>\r\n              </div>\r\n            }\r\n          >\r\n\r\n            <div className=\"upload-form\">\r\n              <Form name=\"validate_other\"\r\n                {...formItemLayout}\r\n                ref={this.formRef}\r\n              >\r\n\r\n                <Form.Item\r\n                  label={this.enzh(\"Upload Name\", \"数据名\")}\r\n                  name=\"uploadName\"\r\n                  rules={[\r\n                    { required: true, message: this.enzh(\"An upload name is required to continue\", \"请输入数据名\") }\r\n                  ]}\r\n                >\r\n                  <Input onChange={this.inputUploadName} placeholder={this.enzh(\"Custom name for this dataset.\", \"\")} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Upload Remarks\", \"上传备注\")} name=\"note\">\r\n                  <TextArea rows={3} placeholder={this.enzh(\"Description and remarks of this dataset (Optional)\", \"\")} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label={this.enzh(\"Select Service\", \"选择数据类型\")}\r\n                  initialValue={APIUtils.ProductsInfo[this.props.tab].productName}\r\n                  name=\"service\"\r\n                >\r\n                  <Select onChange={this.selectService}>\r\n                    <Option value=\"ev\">EV Operation</Option>\r\n                    <Option value=\"ess\">ESS Operation</Option>\r\n                    <Option value=\"rd\">Cell Long-term Performance Testing</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Upload ID Tag\", \"上传标签\")} name=\"idtag\">\r\n                  <Select mode=\"tags\" style={{ width: '100%' }} placeholder={this.enzh(\"Upload Tag (Optional)\", \"\")}>\r\n                    {uploadTagOptions}\r\n                  </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Accident Data\", \"添加事故数据\")} name=\"isAccident\" valuePropName=\"checked\">\r\n                  <Switch checkedChildren=\"Yes\" unCheckedChildren=\"No\" onChange={this.setAccident} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Accident Date\", \"事故日期\")} name=\"accidentDate\">\r\n                  <DatePicker\r\n                    disabled={!this.state.isAccident}\r\n                    placeholder={this.enzh(\"Select Date\", \"选择日期\")}\r\n                    disabledDate={current => current.isAfter(moment())} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={this.enzh(\"Accident Description\", \"事故描述\")} name=\"accidentNote\">\r\n                  <TextArea\r\n                    rows={3}\r\n                    style={{ width: '100%' }}\r\n                    disabled={!this.state.isAccident}\r\n                    placeholder={this.enzh(\"Relevant infomations about this accident. (Optional)\", \"\")} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label={this.enzh(\"Upload File\", \"上传数据\")}\r\n                  rules={[\r\n                    { required: true, message: this.enzh(\"Please upload dataset to continue. \", \"请添加数据文件\") }\r\n                  ]}\r\n                >\r\n                  <Form.Item\r\n                    name=\"dragger\"\r\n                    valuePropName=\"fileList\"\r\n                    getValueFromEvent={this.loadFile}\r\n                    noStyle\r\n                  >\r\n                    <Upload.Dragger\r\n                      name=\"files\"\r\n                      beforeUpload={(file, fileList) => false}\r\n                    >\r\n                      <p className=\"ant-upload-drag-icon\">\r\n                        <InboxOutlined />\r\n                      </p>\r\n                      <p className=\"ant-upload-text\">\r\n                        {this.enzh(\"Click or drag file to this area to upload\", \"点击或拖拽文件至此区域\")}\r\n                    </p>\r\n                    </Upload.Dragger>\r\n                  </Form.Item>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  wrapperCol={{\r\n                    span: 12,\r\n                    offset: 6\r\n                  }}\r\n                >\r\n                </Form.Item>\r\n              </Form>\r\n            </div>\r\n          </Drawer>\r\n        </div>\r\n\r\n        { this.props.uploadInProgress ?\r\n          <UploadController\r\n            file={this.state.fileData}\r\n            uploadName={this.state.uploadName}\r\n            product={this.state.serviceType}\r\n            uploadControl={this.props.uploadControl}\r\n            language={this.props.language}\r\n          /> : null\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadSession;","import React from 'react';\r\n\r\nimport { Layout, Menu, Breadcrumb, } from 'antd';\r\nimport {\r\n  SisternodeOutlined,\r\n  ExperimentOutlined,\r\n  NodeIndexOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport 'styles/Dashboard.css';\r\n\r\nimport DashboardMain from 'components/DashboardMain';\r\nimport UploadSession from 'components/Upload';\r\n\r\n// const { SubMenu } = Menu;\r\nconst { Content, Sider, Footer } = Layout;\r\n\r\ntype PropsType = {\r\n  userInfo: any;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\ntype StateType = {\r\n  tab: string;\r\n  drawerVisible: boolean;\r\n  uploadInProgress: boolean;\r\n}\r\n\r\nclass Dashboard extends React.Component<PropsType, StateType> {\r\n\r\n  state: StateType;\r\n\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      tab: 'EV Management',\r\n      drawerVisible: false,\r\n      uploadInProgress: false\r\n    }\r\n  }\r\n\r\n  // controller methods\r\n  handleSelect = (event: any) => this.setState({ tab: event.key });\r\n  drawerControl = (on: boolean) => this.setState({ drawerVisible: on });\r\n  uploadControl = (on: boolean) => this.setState({ uploadInProgress: on });\r\n\r\n  enzh = (english: string, chinese: string): string =>\r\n    this.props.language === 'en-us' ? english : chinese;\r\n\r\n  zhtab = (english: string): string => {\r\n    switch (english) {\r\n      case \"EV Management\":\r\n        return \"电动汽车分析平台\";\r\n      case \"ESS Management\":\r\n        return \"储能系统分析平台\";\r\n      case \"R&D Management\":\r\n        return \"电池研发测试分析平台\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Dashboard\">\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <Breadcrumb style={{ margin: '16px 0' }}>\r\n            <Breadcrumb.Item>{this.enzh('Home', '主页')}</Breadcrumb.Item>\r\n            <Breadcrumb.Item>{this.enzh(this.state.tab, this.zhtab(this.state.tab))}</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\r\n            <Sider className=\"site-layout-background\" width={220}>\r\n              <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={['EV Management']}\r\n                onSelect={this.handleSelect}\r\n                style={{ height: \"100%\" }}\r\n              >\r\n                <Menu.Item\r\n                  key=\"EV Management\"\r\n                  icon={<SisternodeOutlined />}\r\n                >\r\n                  {this.enzh(\"EV Management\", \"电动汽车分析平台\")}\r\n                </Menu.Item>\r\n\r\n                <Menu.Item\r\n                  key=\"ESS Management\"\r\n                  icon={<NodeIndexOutlined />}\r\n                >\r\n                  {this.enzh(\"ESS Management\", \"储能系统分析平台\")}\r\n                </Menu.Item>\r\n\r\n                <Menu.Item\r\n                  key=\"R&amp;D Management\"\r\n                  icon={<ExperimentOutlined />}\r\n                >\r\n                  {this.enzh(\"R&D Management\", \"电池研发测试分析平台\")}\r\n                </Menu.Item>\r\n              </Menu>\r\n            </Sider>\r\n\r\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n              <DashboardMain\r\n                tab={this.state.tab}\r\n                userInfo={this.props.userInfo}\r\n                uploadInProgress={this.state.uploadInProgress}\r\n                drawerControl={this.drawerControl}\r\n                language={this.props.language}\r\n              />\r\n            </Content>\r\n\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>{\"Fova Energy ©2020\"}</Footer>\r\n        <UploadSession\r\n          drawerVisible={this.state.drawerVisible}\r\n          uploadInProgress={this.state.uploadInProgress}\r\n          drawerControl={this.drawerControl}\r\n          uploadControl={this.uploadControl}\r\n          tab={this.state.tab}\r\n          language={this.props.language}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router';\r\nimport { Layout } from 'antd';\r\n\r\nimport 'styles/App.css';\r\n\r\nimport TopBar from 'components/TopBar';\r\nimport Signin from 'components/Signin';\r\nimport Dashboard from 'components/Dashboard';\r\n\r\nimport * as APIUtils from 'utils/api-utils';\r\n\r\ntype StateType = {\r\n  authorized: boolean;\r\n  userInfo: any;\r\n  language: 'en-us' | 'zh-hans';\r\n}\r\n\r\nclass App extends React.Component<{}, StateType> {\r\n\r\n  state: StateType;\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = {\r\n      authorized: false,\r\n      userInfo: null,\r\n      language: 'en-us' as const\r\n    }\r\n\r\n    this.logUser = this.logUser.bind(this);\r\n    this.handleSignout = this.handleSignout.bind(this);\r\n    this.switchLanguage = this.switchLanguage.bind(this);\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.logUser();\r\n  }\r\n\r\n  logUser = () => {\r\n    APIUtils.get('/api/account/user/info')\r\n    .then(response => {\r\n      if (response.code === 'OK') {\r\n        this.setState({\r\n          userInfo: (response as APIUtils.SuccessResponseDataType).data,\r\n          authorized: true\r\n        })\r\n      }\r\n    })\r\n    .catch(() => {\r\n      this.setState({\r\n        authorized: false\r\n      })\r\n    })\r\n  }\r\n\r\n  handleSignout = () => {\r\n    this.setState({\r\n      authorized: false\r\n    });\r\n  }\r\n\r\n\r\n  switchLanguage = (inputLanguage: StateType[\"language\"]) => {\r\n    this.setState({\r\n      language: inputLanguage\r\n    });\r\n  }\r\n\r\n  mountSignin = () => {\r\n    return this.state.authorized ?\r\n      <Redirect to=\"/home\" /> :\r\n      <Signin\r\n        handleSignin={this.logUser}\r\n        language={this.state.language}\r\n      />\r\n  }\r\n\r\n  mountDashboard = () => {\r\n    return this.state.authorized ?\r\n    <Dashboard\r\n      userInfo={this.state.userInfo}\r\n      language={this.state.language} /> :\r\n    <Redirect to=\"/signin\" />\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Layout>\r\n          <TopBar\r\n            authorized={this.state.authorized}\r\n            language={this.state.language}\r\n            handleSignout={this.handleSignout}\r\n            switchLanguage={this.switchLanguage}\r\n          />\r\n        <Switch>\r\n          <Route exact path=\"/\" render={this.mountSignin} />\r\n          {/* <Route exact path=\"/\" render={this.mountDashboard} /> */}\r\n          <Route path=\"/signin\" render={this.mountSignin} />\r\n          <Route path=\"/home\" render={this.mountDashboard} />\r\n          <Route render={this.mountSignin} />\r\n        </Switch>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport 'styles/index.css';\r\n\r\nimport App from 'components/App';\r\nimport * as serviceWorker from 'serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n  , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}